# Generated from SolidityParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,178,1233,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,5,0,202,8,0,10,0,12,0,205,9,0,1,0,1,0,1,1,1,1,4,1,211,
        8,1,11,1,12,1,212,1,1,1,1,1,2,1,2,1,2,1,2,3,2,221,8,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,233,8,2,1,2,1,2,1,3,1,3,1,3,3,
        3,240,8,3,1,4,1,4,1,5,1,5,1,5,1,5,5,5,248,8,5,10,5,12,5,251,9,5,
        1,5,1,5,1,6,3,6,256,8,6,1,6,1,6,1,6,3,6,261,8,6,1,6,1,6,5,6,265,
        8,6,10,6,12,6,268,9,6,1,6,1,6,1,7,1,7,1,7,3,7,275,8,7,1,7,1,7,5,
        7,279,8,7,10,7,12,7,282,9,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,290,8,8,
        10,8,12,8,293,9,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,301,8,9,10,9,12,9,
        304,9,9,1,10,1,10,3,10,308,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,3,11,322,8,11,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,5,13,332,8,13,10,13,12,13,335,9,13,3,13,337,8,
        13,1,13,1,13,1,13,1,13,5,13,343,8,13,10,13,12,13,346,9,13,3,13,348,
        8,13,1,13,3,13,351,8,13,1,13,1,13,1,14,1,14,1,14,5,14,358,8,14,10,
        14,12,14,361,9,14,1,15,1,15,3,15,365,8,15,1,16,1,16,1,17,1,17,1,
        17,5,17,372,8,17,10,17,12,17,375,9,17,1,18,1,18,3,18,379,8,18,1,
        18,3,18,382,8,18,1,19,1,19,1,19,3,19,387,8,19,1,19,1,19,1,19,1,19,
        1,19,5,19,394,8,19,10,19,12,19,397,9,19,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,5,21,408,8,21,10,21,12,21,411,9,21,1,21,1,21,
        3,21,415,8,21,1,22,1,22,1,22,1,22,3,22,421,8,22,1,22,1,22,3,22,425,
        8,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,433,8,22,10,22,12,22,436,
        9,22,1,22,1,22,1,22,1,22,1,22,3,22,443,8,22,1,22,1,22,3,22,447,8,
        22,1,23,1,23,1,23,1,23,3,23,453,8,23,1,23,3,23,456,8,23,1,23,1,23,
        5,23,460,8,23,10,23,12,23,463,9,23,1,23,1,23,3,23,467,8,23,1,24,
        1,24,1,24,3,24,472,8,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,480,8,
        24,10,24,12,24,483,9,24,1,24,1,24,1,24,1,24,1,24,3,24,490,8,24,1,
        24,1,24,3,24,494,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,
        25,504,8,25,10,25,12,25,507,9,25,1,25,1,25,3,25,511,8,25,1,26,1,
        26,1,26,1,26,4,26,517,8,26,11,26,12,26,518,1,26,1,26,1,27,1,27,1,
        27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,533,8,28,10,28,12,28,
        536,9,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,3,29,545,8,29,1,29,1,
        29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,557,8,30,10,30,12,
        30,560,9,30,1,30,1,30,1,30,3,30,565,8,30,1,30,1,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,32,1,32,3,32,578,8,32,1,32,3,32,581,8,32,1,
        33,1,33,1,33,1,33,1,33,1,33,5,33,589,8,33,10,33,12,33,592,9,33,3,
        33,594,8,33,1,33,1,33,3,33,598,8,33,1,33,1,33,1,34,1,34,3,34,604,
        8,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,612,8,35,10,35,12,35,615,
        9,35,3,35,617,8,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,
        1,37,1,37,5,37,630,8,37,10,37,12,37,633,9,37,1,37,1,37,3,37,637,
        8,37,1,37,1,37,1,37,3,37,642,8,37,1,37,3,37,645,8,37,1,37,1,37,1,
        38,1,38,1,38,3,38,652,8,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,660,
        8,39,1,39,1,39,1,39,3,39,665,8,39,1,39,5,39,668,8,39,10,39,12,39,
        671,9,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,3,42,681,8,42,1,
        42,1,42,1,42,5,42,686,8,42,10,42,12,42,689,9,42,1,42,1,42,1,42,1,
        42,1,42,3,42,696,8,42,1,43,1,43,3,43,700,8,43,1,43,1,43,1,44,1,44,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,3,45,724,8,45,3,45,726,8,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,3,45,774,8,45,1,45,1,45,1,45,1,45,3,45,780,
        8,45,1,45,1,45,3,45,784,8,45,1,45,1,45,1,45,1,45,1,45,3,45,791,8,
        45,1,45,1,45,1,45,1,45,1,45,5,45,798,8,45,10,45,12,45,801,9,45,3,
        45,803,8,45,1,45,1,45,1,45,1,45,1,45,5,45,810,8,45,10,45,12,45,813,
        9,45,1,46,1,46,1,47,1,47,3,47,819,8,47,1,47,1,47,3,47,823,8,47,5,
        47,825,8,47,10,47,12,47,828,9,47,1,47,1,47,1,48,1,48,1,48,1,48,5,
        48,836,8,48,10,48,12,48,839,9,48,1,48,1,48,1,49,1,49,1,50,1,50,1,
        50,1,50,1,50,3,50,850,8,50,1,51,1,51,1,51,1,52,1,52,1,53,4,53,858,
        8,53,11,53,12,53,859,1,54,4,54,863,8,54,11,54,12,54,864,1,55,4,55,
        868,8,55,11,55,12,55,869,1,56,1,56,1,57,1,57,1,57,5,57,877,8,57,
        10,57,12,57,880,9,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,900,8,59,1,60,
        1,60,3,60,904,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,913,8,
        61,1,62,1,62,1,62,1,62,3,62,919,8,62,1,62,1,62,3,62,923,8,62,1,62,
        3,62,926,8,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,958,8,67,1,67,1,67,4,67,
        962,8,67,11,67,12,67,963,1,68,1,68,3,68,968,8,68,1,68,1,68,1,68,
        1,68,3,68,974,8,68,1,68,1,68,1,69,1,69,3,69,980,8,69,1,69,1,69,1,
        70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,3,72,996,
        8,72,1,72,3,72,999,8,72,1,72,1,72,5,72,1003,8,72,10,72,12,72,1006,
        9,72,1,72,1,72,1,73,1,73,1,73,1,73,5,73,1014,8,73,10,73,12,73,1017,
        9,73,1,73,1,73,1,74,1,74,1,74,5,74,1024,8,74,10,74,12,74,1027,9,
        74,1,75,1,75,5,75,1031,8,75,10,75,12,75,1034,9,75,1,75,1,75,1,75,
        1,75,3,75,1040,8,75,5,75,1042,8,75,10,75,12,75,1045,9,75,1,75,1,
        75,1,76,1,76,1,76,3,76,1052,8,76,1,76,1,76,1,76,1,76,3,76,1058,8,
        76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,1069,8,78,1,
        78,1,78,1,78,3,78,1074,8,78,1,78,1,78,1,79,1,79,3,79,1080,8,79,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1093,8,
        80,1,81,1,81,5,81,1097,8,81,10,81,12,81,1100,9,81,1,81,1,81,1,82,
        1,82,1,82,1,82,3,82,1108,8,82,1,82,1,82,1,82,1,82,5,82,1114,8,82,
        10,82,12,82,1117,9,82,1,82,1,82,3,82,1121,8,82,3,82,1123,8,82,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,4,83,1132,8,83,11,83,12,83,1133,
        1,83,1,83,1,83,3,83,1139,8,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,
        1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,4,87,1158,8,87,
        11,87,12,87,1159,1,87,1,87,3,87,1164,8,87,1,87,1,87,3,87,1168,8,
        87,1,88,1,88,1,88,1,88,1,88,1,88,5,88,1176,8,88,10,88,12,88,1179,
        9,88,3,88,1181,8,88,1,88,1,88,1,88,1,88,1,88,5,88,1188,8,88,10,88,
        12,88,1191,9,88,3,88,1193,8,88,1,88,1,88,1,89,1,89,1,89,5,89,1200,
        8,89,10,89,12,89,1203,9,89,1,90,1,90,1,90,1,90,1,90,5,90,1210,8,
        90,10,90,12,90,1213,9,90,3,90,1215,8,90,1,90,1,90,1,91,1,91,1,92,
        1,92,1,92,1,92,1,92,3,92,1226,8,92,1,93,1,93,1,93,3,93,1231,8,93,
        1,93,1,302,2,78,90,94,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,0,19,3,0,23,23,38,38,49,50,3,0,47,47,51,51,69,
        69,4,0,99,101,105,109,111,116,118,118,8,0,3,3,7,7,9,9,26,27,56,56,
        58,58,64,64,67,67,3,0,10,10,42,42,57,57,3,0,16,16,106,106,117,120,
        1,0,107,109,1,0,105,106,1,0,102,104,1,0,113,116,1,0,111,112,1,0,
        119,120,1,0,84,95,6,0,21,21,29,29,31,31,55,55,60,60,131,131,2,0,
        25,25,61,61,1,0,123,124,2,0,127,127,129,129,2,0,157,157,166,166,
        2,0,148,148,155,155,1372,0,203,1,0,0,0,2,208,1,0,0,0,4,216,1,0,0,
        0,6,236,1,0,0,0,8,241,1,0,0,0,10,243,1,0,0,0,12,255,1,0,0,0,14,271,
        1,0,0,0,16,285,1,0,0,0,18,296,1,0,0,0,20,305,1,0,0,0,22,321,1,0,
        0,0,24,323,1,0,0,0,26,327,1,0,0,0,28,354,1,0,0,0,30,362,1,0,0,0,
        32,366,1,0,0,0,34,368,1,0,0,0,36,376,1,0,0,0,38,383,1,0,0,0,40,400,
        1,0,0,0,42,402,1,0,0,0,44,416,1,0,0,0,46,448,1,0,0,0,48,468,1,0,
        0,0,50,495,1,0,0,0,52,512,1,0,0,0,54,522,1,0,0,0,56,526,1,0,0,0,
        58,539,1,0,0,0,60,548,1,0,0,0,62,568,1,0,0,0,64,575,1,0,0,0,66,582,
        1,0,0,0,68,601,1,0,0,0,70,605,1,0,0,0,72,621,1,0,0,0,74,623,1,0,
        0,0,76,648,1,0,0,0,78,659,1,0,0,0,80,672,1,0,0,0,82,674,1,0,0,0,
        84,677,1,0,0,0,86,697,1,0,0,0,88,703,1,0,0,0,90,725,1,0,0,0,92,814,
        1,0,0,0,94,816,1,0,0,0,96,831,1,0,0,0,98,842,1,0,0,0,100,849,1,0,
        0,0,102,851,1,0,0,0,104,854,1,0,0,0,106,857,1,0,0,0,108,862,1,0,
        0,0,110,867,1,0,0,0,112,871,1,0,0,0,114,873,1,0,0,0,116,883,1,0,
        0,0,118,899,1,0,0,0,120,903,1,0,0,0,122,905,1,0,0,0,124,914,1,0,
        0,0,126,930,1,0,0,0,128,936,1,0,0,0,130,944,1,0,0,0,132,947,1,0,
        0,0,134,950,1,0,0,0,136,965,1,0,0,0,138,977,1,0,0,0,140,983,1,0,
        0,0,142,988,1,0,0,0,144,993,1,0,0,0,146,1009,1,0,0,0,148,1020,1,
        0,0,0,150,1028,1,0,0,0,152,1057,1,0,0,0,154,1061,1,0,0,0,156,1064,
        1,0,0,0,158,1079,1,0,0,0,160,1092,1,0,0,0,162,1094,1,0,0,0,164,1122,
        1,0,0,0,166,1138,1,0,0,0,168,1140,1,0,0,0,170,1144,1,0,0,0,172,1150,
        1,0,0,0,174,1154,1,0,0,0,176,1169,1,0,0,0,178,1196,1,0,0,0,180,1204,
        1,0,0,0,182,1218,1,0,0,0,184,1225,1,0,0,0,186,1230,1,0,0,0,188,202,
        3,2,1,0,189,202,3,4,2,0,190,202,3,74,37,0,191,202,3,12,6,0,192,202,
        3,14,7,0,193,202,3,16,8,0,194,202,3,44,22,0,195,202,3,62,31,0,196,
        202,3,52,26,0,197,202,3,56,28,0,198,202,3,58,29,0,199,202,3,70,35,
        0,200,202,3,66,33,0,201,188,1,0,0,0,201,189,1,0,0,0,201,190,1,0,
        0,0,201,191,1,0,0,0,201,192,1,0,0,0,201,193,1,0,0,0,201,194,1,0,
        0,0,201,195,1,0,0,0,201,196,1,0,0,0,201,197,1,0,0,0,201,198,1,0,
        0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,
        0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,5,0,
        0,1,207,1,1,0,0,0,208,210,5,48,0,0,209,211,5,174,0,0,210,209,1,0,
        0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,214,1,0,
        0,0,214,215,5,175,0,0,215,3,1,0,0,0,216,232,5,35,0,0,217,220,3,8,
        4,0,218,219,5,5,0,0,219,221,3,98,49,0,220,218,1,0,0,0,220,221,1,
        0,0,0,221,233,1,0,0,0,222,223,3,10,5,0,223,224,5,29,0,0,224,225,
        3,8,4,0,225,233,1,0,0,0,226,227,5,107,0,0,227,228,5,5,0,0,228,229,
        3,98,49,0,229,230,5,29,0,0,230,231,3,8,4,0,231,233,1,0,0,0,232,217,
        1,0,0,0,232,222,1,0,0,0,232,226,1,0,0,0,233,234,1,0,0,0,234,235,
        5,79,0,0,235,5,1,0,0,0,236,239,3,98,49,0,237,238,5,5,0,0,238,240,
        3,98,49,0,239,237,1,0,0,0,239,240,1,0,0,0,240,7,1,0,0,0,241,242,
        5,123,0,0,242,9,1,0,0,0,243,244,5,76,0,0,244,249,3,6,3,0,245,246,
        5,96,0,0,246,248,3,6,3,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,
        1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,253,
        5,77,0,0,253,11,1,0,0,0,254,256,5,2,0,0,255,254,1,0,0,0,255,256,
        1,0,0,0,256,257,1,0,0,0,257,258,5,15,0,0,258,260,3,98,49,0,259,261,
        3,18,9,0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,266,
        5,76,0,0,263,265,3,22,11,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,
        1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,270,
        5,77,0,0,270,13,1,0,0,0,271,272,5,37,0,0,272,274,3,98,49,0,273,275,
        3,18,9,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,280,
        5,76,0,0,277,279,3,22,11,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,
        1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,284,
        5,77,0,0,284,15,1,0,0,0,285,286,5,40,0,0,286,287,3,98,49,0,287,291,
        5,76,0,0,288,290,3,22,11,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,
        1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,
        5,77,0,0,295,17,1,0,0,0,296,297,5,39,0,0,297,302,3,20,10,0,298,299,
        5,96,0,0,299,301,3,20,10,0,300,298,1,0,0,0,301,304,1,0,0,0,302,303,
        1,0,0,0,302,300,1,0,0,0,303,19,1,0,0,0,304,302,1,0,0,0,305,307,3,
        28,14,0,306,308,3,26,13,0,307,306,1,0,0,0,307,308,1,0,0,0,308,21,
        1,0,0,0,309,322,3,38,19,0,310,322,3,44,22,0,311,322,3,46,23,0,312,
        322,3,48,24,0,313,322,3,50,25,0,314,322,3,52,26,0,315,322,3,56,28,
        0,316,322,3,58,29,0,317,322,3,60,30,0,318,322,3,66,33,0,319,322,
        3,70,35,0,320,322,3,74,37,0,321,309,1,0,0,0,321,310,1,0,0,0,321,
        311,1,0,0,0,321,312,1,0,0,0,321,313,1,0,0,0,321,314,1,0,0,0,321,
        315,1,0,0,0,321,316,1,0,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,
        319,1,0,0,0,321,320,1,0,0,0,322,23,1,0,0,0,323,324,3,98,49,0,324,
        325,5,78,0,0,325,326,3,90,45,0,326,25,1,0,0,0,327,350,5,72,0,0,328,
        333,3,90,45,0,329,330,5,96,0,0,330,332,3,90,45,0,331,329,1,0,0,0,
        332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,337,1,0,0,0,
        335,333,1,0,0,0,336,328,1,0,0,0,336,337,1,0,0,0,337,351,1,0,0,0,
        338,347,5,76,0,0,339,344,3,24,12,0,340,341,5,96,0,0,341,343,3,24,
        12,0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,
        0,0,345,348,1,0,0,0,346,344,1,0,0,0,347,339,1,0,0,0,347,348,1,0,
        0,0,348,349,1,0,0,0,349,351,5,77,0,0,350,336,1,0,0,0,350,338,1,0,
        0,0,351,352,1,0,0,0,352,353,5,73,0,0,353,27,1,0,0,0,354,359,3,98,
        49,0,355,356,5,80,0,0,356,358,3,98,49,0,357,355,1,0,0,0,358,361,
        1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,29,1,0,0,0,361,359,1,
        0,0,0,362,364,3,28,14,0,363,365,3,26,13,0,364,363,1,0,0,0,364,365,
        1,0,0,0,365,31,1,0,0,0,366,367,7,0,0,0,367,33,1,0,0,0,368,373,3,
        36,18,0,369,370,5,96,0,0,370,372,3,36,18,0,371,369,1,0,0,0,372,375,
        1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,35,1,0,0,0,375,373,1,
        0,0,0,376,378,3,78,39,0,377,379,3,88,44,0,378,377,1,0,0,0,378,379,
        1,0,0,0,379,381,1,0,0,0,380,382,3,98,49,0,381,380,1,0,0,0,381,382,
        1,0,0,0,382,37,1,0,0,0,383,384,5,13,0,0,384,386,5,72,0,0,385,387,
        3,34,17,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,395,
        5,73,0,0,389,394,3,30,15,0,390,394,5,47,0,0,391,394,5,38,0,0,392,
        394,5,50,0,0,393,389,1,0,0,0,393,390,1,0,0,0,393,391,1,0,0,0,393,
        392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,
        398,1,0,0,0,397,395,1,0,0,0,398,399,3,114,57,0,399,39,1,0,0,0,400,
        401,7,1,0,0,401,41,1,0,0,0,402,414,5,46,0,0,403,404,5,72,0,0,404,
        409,3,28,14,0,405,406,5,96,0,0,406,408,3,28,14,0,407,405,1,0,0,0,
        408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,
        411,409,1,0,0,0,412,413,5,73,0,0,413,415,1,0,0,0,414,403,1,0,0,0,
        414,415,1,0,0,0,415,43,1,0,0,0,416,420,5,30,0,0,417,421,3,98,49,
        0,418,421,5,24,0,0,419,421,5,52,0,0,420,417,1,0,0,0,420,418,1,0,
        0,0,420,419,1,0,0,0,421,422,1,0,0,0,422,424,5,72,0,0,423,425,3,34,
        17,0,424,423,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,434,5,73,
        0,0,427,433,3,32,16,0,428,433,3,40,20,0,429,433,3,30,15,0,430,433,
        5,70,0,0,431,433,3,42,21,0,432,427,1,0,0,0,432,428,1,0,0,0,432,429,
        1,0,0,0,432,430,1,0,0,0,432,431,1,0,0,0,433,436,1,0,0,0,434,432,
        1,0,0,0,434,435,1,0,0,0,435,442,1,0,0,0,436,434,1,0,0,0,437,438,
        5,54,0,0,438,439,5,72,0,0,439,440,3,34,17,0,440,441,5,73,0,0,441,
        443,1,0,0,0,442,437,1,0,0,0,442,443,1,0,0,0,443,446,1,0,0,0,444,
        447,5,79,0,0,445,447,3,114,57,0,446,444,1,0,0,0,446,445,1,0,0,0,
        447,45,1,0,0,0,448,449,5,43,0,0,449,455,3,98,49,0,450,452,5,72,0,
        0,451,453,3,34,17,0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,
        0,0,454,456,5,73,0,0,455,450,1,0,0,0,455,456,1,0,0,0,456,461,1,0,
        0,0,457,460,5,70,0,0,458,460,3,42,21,0,459,457,1,0,0,0,459,458,1,
        0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,466,1,
        0,0,0,463,461,1,0,0,0,464,467,5,79,0,0,465,467,3,114,57,0,466,464,
        1,0,0,0,466,465,1,0,0,0,467,47,1,0,0,0,468,469,5,24,0,0,469,471,
        5,72,0,0,470,472,3,34,17,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,
        1,0,0,0,473,481,5,73,0,0,474,480,5,23,0,0,475,480,3,40,20,0,476,
        480,3,30,15,0,477,480,5,70,0,0,478,480,3,42,21,0,479,474,1,0,0,0,
        479,475,1,0,0,0,479,476,1,0,0,0,479,477,1,0,0,0,479,478,1,0,0,0,
        480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,489,1,0,0,0,
        483,481,1,0,0,0,484,485,5,54,0,0,485,486,5,72,0,0,486,487,3,34,17,
        0,487,488,5,73,0,0,488,490,1,0,0,0,489,484,1,0,0,0,489,490,1,0,0,
        0,490,493,1,0,0,0,491,494,5,79,0,0,492,494,3,114,57,0,493,491,1,
        0,0,0,493,492,1,0,0,0,494,49,1,0,0,0,495,496,5,52,0,0,496,497,5,
        72,0,0,497,505,5,73,0,0,498,504,5,23,0,0,499,504,5,47,0,0,500,504,
        3,30,15,0,501,504,5,70,0,0,502,504,3,42,21,0,503,498,1,0,0,0,503,
        499,1,0,0,0,503,500,1,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,
        507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,510,1,0,0,0,507,
        505,1,0,0,0,508,511,5,79,0,0,509,511,3,114,57,0,510,508,1,0,0,0,
        510,509,1,0,0,0,511,51,1,0,0,0,512,513,5,59,0,0,513,514,3,98,49,
        0,514,516,5,76,0,0,515,517,3,54,27,0,516,515,1,0,0,0,517,518,1,0,
        0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,5,77,
        0,0,521,53,1,0,0,0,522,523,3,78,39,0,523,524,3,98,49,0,524,525,5,
        79,0,0,525,55,1,0,0,0,526,527,5,20,0,0,527,528,3,98,49,0,528,529,
        5,76,0,0,529,534,3,98,49,0,530,531,5,96,0,0,531,533,3,98,49,0,532,
        530,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,
        537,1,0,0,0,536,534,1,0,0,0,537,538,5,77,0,0,538,57,1,0,0,0,539,
        540,5,63,0,0,540,541,3,98,49,0,541,544,5,39,0,0,542,545,3,80,40,
        0,543,545,3,82,41,0,544,542,1,0,0,0,544,543,1,0,0,0,545,546,1,0,
        0,0,546,547,5,79,0,0,547,59,1,0,0,0,548,558,3,78,39,0,549,557,5,
        50,0,0,550,557,5,49,0,0,551,557,5,38,0,0,552,557,5,12,0,0,553,557,
        3,42,21,0,554,557,5,34,0,0,555,557,5,60,0,0,556,549,1,0,0,0,556,
        550,1,0,0,0,556,551,1,0,0,0,556,552,1,0,0,0,556,553,1,0,0,0,556,
        554,1,0,0,0,556,555,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,
        559,1,0,0,0,559,561,1,0,0,0,560,558,1,0,0,0,561,564,3,98,49,0,562,
        563,5,84,0,0,563,565,3,90,45,0,564,562,1,0,0,0,564,565,1,0,0,0,565,
        566,1,0,0,0,566,567,5,79,0,0,567,61,1,0,0,0,568,569,3,78,39,0,569,
        570,5,12,0,0,570,571,3,98,49,0,571,572,5,84,0,0,572,573,3,90,45,
        0,573,574,5,79,0,0,574,63,1,0,0,0,575,577,3,78,39,0,576,578,5,36,
        0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,581,3,98,
        49,0,580,579,1,0,0,0,580,581,1,0,0,0,581,65,1,0,0,0,582,583,5,22,
        0,0,583,584,3,98,49,0,584,593,5,72,0,0,585,590,3,64,32,0,586,587,
        5,96,0,0,587,589,3,64,32,0,588,586,1,0,0,0,589,592,1,0,0,0,590,588,
        1,0,0,0,590,591,1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,593,585,
        1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,597,5,73,0,0,596,598,
        5,4,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,
        5,79,0,0,600,67,1,0,0,0,601,603,3,78,39,0,602,604,3,98,49,0,603,
        602,1,0,0,0,603,604,1,0,0,0,604,69,1,0,0,0,605,606,5,21,0,0,606,
        607,3,98,49,0,607,616,5,72,0,0,608,613,3,68,34,0,609,610,5,96,0,
        0,610,612,3,68,34,0,611,609,1,0,0,0,612,615,1,0,0,0,613,611,1,0,
        0,0,613,614,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,616,608,1,0,
        0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,619,5,73,0,0,619,620,5,79,
        0,0,620,71,1,0,0,0,621,622,7,2,0,0,622,73,1,0,0,0,623,636,5,68,0,
        0,624,637,3,28,14,0,625,626,5,76,0,0,626,631,3,76,38,0,627,628,5,
        96,0,0,628,630,3,76,38,0,629,627,1,0,0,0,630,633,1,0,0,0,631,629,
        1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,635,
        5,77,0,0,635,637,1,0,0,0,636,624,1,0,0,0,636,625,1,0,0,0,637,638,
        1,0,0,0,638,641,5,28,0,0,639,642,5,107,0,0,640,642,3,78,39,0,641,
        639,1,0,0,0,641,640,1,0,0,0,642,644,1,0,0,0,643,645,5,31,0,0,644,
        643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,647,5,79,0,0,647,
        75,1,0,0,0,648,651,3,28,14,0,649,650,5,5,0,0,650,652,3,72,36,0,651,
        649,1,0,0,0,651,652,1,0,0,0,652,77,1,0,0,0,653,654,6,39,-1,0,654,
        660,3,80,40,0,655,660,3,82,41,0,656,660,3,84,42,0,657,660,3,156,
        78,0,658,660,3,28,14,0,659,653,1,0,0,0,659,655,1,0,0,0,659,656,1,
        0,0,0,659,657,1,0,0,0,659,658,1,0,0,0,660,669,1,0,0,0,661,662,10,
        1,0,0,662,664,5,74,0,0,663,665,3,90,45,0,664,663,1,0,0,0,664,665,
        1,0,0,0,665,666,1,0,0,0,666,668,5,75,0,0,667,661,1,0,0,0,668,671,
        1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,79,1,0,0,0,671,669,1,
        0,0,0,672,673,7,3,0,0,673,81,1,0,0,0,674,675,5,3,0,0,675,676,5,47,
        0,0,676,83,1,0,0,0,677,678,5,30,0,0,678,680,5,72,0,0,679,681,3,34,
        17,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,687,5,73,
        0,0,683,686,3,32,16,0,684,686,3,40,20,0,685,683,1,0,0,0,685,684,
        1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,695,
        1,0,0,0,689,687,1,0,0,0,690,691,5,54,0,0,691,692,5,72,0,0,692,693,
        3,34,17,0,693,694,5,73,0,0,694,696,1,0,0,0,695,690,1,0,0,0,695,696,
        1,0,0,0,696,85,1,0,0,0,697,699,3,78,39,0,698,700,3,88,44,0,699,698,
        1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,702,3,98,49,0,702,87,
        1,0,0,0,703,704,7,4,0,0,704,89,1,0,0,0,705,706,6,45,-1,0,706,707,
        5,47,0,0,707,726,3,26,13,0,708,709,5,63,0,0,709,710,5,72,0,0,710,
        711,3,78,39,0,711,712,5,73,0,0,712,726,1,0,0,0,713,714,7,5,0,0,714,
        726,3,90,45,19,715,716,5,44,0,0,716,726,3,78,39,0,717,726,3,94,47,
        0,718,726,3,96,48,0,719,724,3,98,49,0,720,724,3,100,50,0,721,724,
        3,102,51,0,722,724,3,80,40,0,723,719,1,0,0,0,723,720,1,0,0,0,723,
        721,1,0,0,0,723,722,1,0,0,0,724,726,1,0,0,0,725,705,1,0,0,0,725,
        708,1,0,0,0,725,713,1,0,0,0,725,715,1,0,0,0,725,717,1,0,0,0,725,
        718,1,0,0,0,725,723,1,0,0,0,726,811,1,0,0,0,727,728,10,17,0,0,728,
        729,5,110,0,0,729,810,3,90,45,17,730,731,10,16,0,0,731,732,7,6,0,
        0,732,810,3,90,45,17,733,734,10,15,0,0,734,735,7,7,0,0,735,810,3,
        90,45,16,736,737,10,14,0,0,737,738,7,8,0,0,738,810,3,90,45,15,739,
        740,10,13,0,0,740,741,5,101,0,0,741,810,3,90,45,14,742,743,10,12,
        0,0,743,744,5,100,0,0,744,810,3,90,45,13,745,746,10,11,0,0,746,747,
        5,99,0,0,747,810,3,90,45,12,748,749,10,10,0,0,749,750,7,9,0,0,750,
        810,3,90,45,11,751,752,10,9,0,0,752,753,7,10,0,0,753,810,3,90,45,
        10,754,755,10,8,0,0,755,756,5,98,0,0,756,810,3,90,45,9,757,758,10,
        7,0,0,758,759,5,97,0,0,759,810,3,90,45,8,760,761,10,6,0,0,761,762,
        5,81,0,0,762,763,3,90,45,0,763,764,5,78,0,0,764,765,3,90,45,6,765,
        810,1,0,0,0,766,767,10,5,0,0,767,768,3,92,46,0,768,769,3,90,45,5,
        769,810,1,0,0,0,770,771,10,26,0,0,771,773,5,74,0,0,772,774,3,90,
        45,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,810,5,75,
        0,0,776,777,10,25,0,0,777,779,5,74,0,0,778,780,3,90,45,0,779,778,
        1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,783,5,78,0,0,782,784,
        3,90,45,0,783,782,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,810,
        5,75,0,0,786,787,10,24,0,0,787,790,5,80,0,0,788,791,3,98,49,0,789,
        791,5,3,0,0,790,788,1,0,0,0,790,789,1,0,0,0,791,810,1,0,0,0,792,
        793,10,23,0,0,793,802,5,76,0,0,794,799,3,24,12,0,795,796,5,96,0,
        0,796,798,3,24,12,0,797,795,1,0,0,0,798,801,1,0,0,0,799,797,1,0,
        0,0,799,800,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,802,794,1,0,
        0,0,802,803,1,0,0,0,803,804,1,0,0,0,804,810,5,77,0,0,805,806,10,
        22,0,0,806,810,3,26,13,0,807,808,10,18,0,0,808,810,7,11,0,0,809,
        727,1,0,0,0,809,730,1,0,0,0,809,733,1,0,0,0,809,736,1,0,0,0,809,
        739,1,0,0,0,809,742,1,0,0,0,809,745,1,0,0,0,809,748,1,0,0,0,809,
        751,1,0,0,0,809,754,1,0,0,0,809,757,1,0,0,0,809,760,1,0,0,0,809,
        766,1,0,0,0,809,770,1,0,0,0,809,776,1,0,0,0,809,786,1,0,0,0,809,
        792,1,0,0,0,809,805,1,0,0,0,809,807,1,0,0,0,810,813,1,0,0,0,811,
        809,1,0,0,0,811,812,1,0,0,0,812,91,1,0,0,0,813,811,1,0,0,0,814,815,
        7,12,0,0,815,93,1,0,0,0,816,818,5,72,0,0,817,819,3,90,45,0,818,817,
        1,0,0,0,818,819,1,0,0,0,819,826,1,0,0,0,820,822,5,96,0,0,821,823,
        3,90,45,0,822,821,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,820,
        1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,827,829,
        1,0,0,0,828,826,1,0,0,0,829,830,5,73,0,0,830,95,1,0,0,0,831,832,
        5,74,0,0,832,837,3,90,45,0,833,834,5,96,0,0,834,836,3,90,45,0,835,
        833,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,
        840,1,0,0,0,839,837,1,0,0,0,840,841,5,75,0,0,841,97,1,0,0,0,842,
        843,7,13,0,0,843,99,1,0,0,0,844,850,3,106,53,0,845,850,3,112,56,
        0,846,850,3,104,52,0,847,850,3,108,54,0,848,850,3,110,55,0,849,844,
        1,0,0,0,849,845,1,0,0,0,849,846,1,0,0,0,849,847,1,0,0,0,849,848,
        1,0,0,0,850,101,1,0,0,0,851,852,3,112,56,0,852,853,5,45,0,0,853,
        103,1,0,0,0,854,855,7,14,0,0,855,105,1,0,0,0,856,858,7,15,0,0,857,
        856,1,0,0,0,858,859,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,
        107,1,0,0,0,861,863,5,126,0,0,862,861,1,0,0,0,863,864,1,0,0,0,864,
        862,1,0,0,0,864,865,1,0,0,0,865,109,1,0,0,0,866,868,5,125,0,0,867,
        866,1,0,0,0,868,869,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,
        111,1,0,0,0,871,872,7,16,0,0,872,113,1,0,0,0,873,878,5,76,0,0,874,
        877,3,118,59,0,875,877,3,116,58,0,876,874,1,0,0,0,876,875,1,0,0,
        0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,
        0,880,878,1,0,0,0,881,882,5,77,0,0,882,115,1,0,0,0,883,884,5,65,
        0,0,884,885,3,114,57,0,885,117,1,0,0,0,886,900,3,114,57,0,887,900,
        3,120,60,0,888,900,3,122,61,0,889,900,3,124,62,0,890,900,3,126,63,
        0,891,900,3,128,64,0,892,900,3,130,65,0,893,900,3,132,66,0,894,900,
        3,134,67,0,895,900,3,138,69,0,896,900,3,140,70,0,897,900,3,142,71,
        0,898,900,3,144,72,0,899,886,1,0,0,0,899,887,1,0,0,0,899,888,1,0,
        0,0,899,889,1,0,0,0,899,890,1,0,0,0,899,891,1,0,0,0,899,892,1,0,
        0,0,899,893,1,0,0,0,899,894,1,0,0,0,899,895,1,0,0,0,899,896,1,0,
        0,0,899,897,1,0,0,0,899,898,1,0,0,0,900,119,1,0,0,0,901,904,3,152,
        76,0,902,904,3,154,77,0,903,901,1,0,0,0,903,902,1,0,0,0,904,121,
        1,0,0,0,905,906,5,33,0,0,906,907,5,72,0,0,907,908,3,90,45,0,908,
        909,5,73,0,0,909,912,3,118,59,0,910,911,5,18,0,0,911,913,3,118,59,
        0,912,910,1,0,0,0,912,913,1,0,0,0,913,123,1,0,0,0,914,915,5,28,0,
        0,915,918,5,72,0,0,916,919,3,120,60,0,917,919,5,79,0,0,918,916,1,
        0,0,0,918,917,1,0,0,0,919,922,1,0,0,0,920,923,3,154,77,0,921,923,
        5,79,0,0,922,920,1,0,0,0,922,921,1,0,0,0,923,925,1,0,0,0,924,926,
        3,90,45,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,
        5,73,0,0,928,929,3,118,59,0,929,125,1,0,0,0,930,931,5,71,0,0,931,
        932,5,72,0,0,932,933,3,90,45,0,933,934,5,73,0,0,934,935,3,118,59,
        0,935,127,1,0,0,0,936,937,5,17,0,0,937,938,3,118,59,0,938,939,5,
        71,0,0,939,940,5,72,0,0,940,941,3,90,45,0,941,942,5,73,0,0,942,943,
        5,79,0,0,943,129,1,0,0,0,944,945,5,14,0,0,945,946,5,79,0,0,946,131,
        1,0,0,0,947,948,5,8,0,0,948,949,5,79,0,0,949,133,1,0,0,0,950,951,
        5,62,0,0,951,957,3,90,45,0,952,953,5,54,0,0,953,954,5,72,0,0,954,
        955,3,34,17,0,955,956,5,73,0,0,956,958,1,0,0,0,957,952,1,0,0,0,957,
        958,1,0,0,0,958,959,1,0,0,0,959,961,3,114,57,0,960,962,3,136,68,
        0,961,960,1,0,0,0,962,963,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,
        0,964,135,1,0,0,0,965,973,5,11,0,0,966,968,3,98,49,0,967,966,1,0,
        0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,970,5,72,0,0,970,971,3,34,
        17,0,971,972,5,73,0,0,972,974,1,0,0,0,973,967,1,0,0,0,973,974,1,
        0,0,0,974,975,1,0,0,0,975,976,3,114,57,0,976,137,1,0,0,0,977,979,
        5,53,0,0,978,980,3,90,45,0,979,978,1,0,0,0,979,980,1,0,0,0,980,981,
        1,0,0,0,981,982,5,79,0,0,982,139,1,0,0,0,983,984,5,19,0,0,984,985,
        3,90,45,0,985,986,3,26,13,0,986,987,5,79,0,0,987,141,1,0,0,0,988,
        989,5,55,0,0,989,990,3,90,45,0,990,991,3,26,13,0,991,992,5,79,0,
        0,992,143,1,0,0,0,993,995,5,6,0,0,994,996,5,135,0,0,995,994,1,0,
        0,0,995,996,1,0,0,0,996,998,1,0,0,0,997,999,3,146,73,0,998,997,1,
        0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,1000,1004,5,136,0,0,1001,
        1003,3,160,80,0,1002,1001,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,
        0,0,0,1004,1005,1,0,0,0,1005,1007,1,0,0,0,1006,1004,1,0,0,0,1007,
        1008,5,159,0,0,1008,145,1,0,0,0,1009,1010,5,138,0,0,1010,1015,5,
        137,0,0,1011,1012,5,140,0,0,1012,1014,5,137,0,0,1013,1011,1,0,0,
        0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1018,
        1,0,0,0,1017,1015,1,0,0,0,1018,1019,5,139,0,0,1019,147,1,0,0,0,1020,
        1025,3,86,43,0,1021,1022,5,96,0,0,1022,1024,3,86,43,0,1023,1021,
        1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,
        149,1,0,0,0,1027,1025,1,0,0,0,1028,1032,5,72,0,0,1029,1031,5,96,
        0,0,1030,1029,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,
        1,0,0,0,1033,1035,1,0,0,0,1034,1032,1,0,0,0,1035,1036,3,86,43,0,
        1036,1043,1,0,0,0,1037,1039,5,96,0,0,1038,1040,3,86,43,0,1039,1038,
        1,0,0,0,1039,1040,1,0,0,0,1040,1042,1,0,0,0,1041,1037,1,0,0,0,1042,
        1045,1,0,0,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,1046,1,0,0,
        0,1045,1043,1,0,0,0,1046,1047,5,73,0,0,1047,151,1,0,0,0,1048,1051,
        3,86,43,0,1049,1050,5,84,0,0,1050,1052,3,90,45,0,1051,1049,1,0,0,
        0,1051,1052,1,0,0,0,1052,1058,1,0,0,0,1053,1054,3,150,75,0,1054,
        1055,5,84,0,0,1055,1056,3,90,45,0,1056,1058,1,0,0,0,1057,1048,1,
        0,0,0,1057,1053,1,0,0,0,1058,1059,1,0,0,0,1059,1060,5,79,0,0,1060,
        153,1,0,0,0,1061,1062,3,90,45,0,1062,1063,5,79,0,0,1063,155,1,0,
        0,0,1064,1065,5,41,0,0,1065,1066,5,72,0,0,1066,1068,3,158,79,0,1067,
        1069,3,98,49,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,
        0,0,1070,1071,5,82,0,0,1071,1073,3,78,39,0,1072,1074,3,98,49,0,1073,
        1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1076,5,73,
        0,0,1076,157,1,0,0,0,1077,1080,3,80,40,0,1078,1080,3,28,14,0,1079,
        1077,1,0,0,0,1079,1078,1,0,0,0,1080,159,1,0,0,0,1081,1093,3,162,
        81,0,1082,1093,3,164,82,0,1083,1093,3,166,83,0,1084,1093,3,180,90,
        0,1085,1093,3,168,84,0,1086,1093,3,170,85,0,1087,1093,3,174,87,0,
        1088,1093,5,152,0,0,1089,1093,5,144,0,0,1090,1093,5,146,0,0,1091,
        1093,3,176,88,0,1092,1081,1,0,0,0,1092,1082,1,0,0,0,1092,1083,1,
        0,0,0,1092,1084,1,0,0,0,1092,1085,1,0,0,0,1092,1086,1,0,0,0,1092,
        1087,1,0,0,0,1092,1088,1,0,0,0,1092,1089,1,0,0,0,1092,1090,1,0,0,
        0,1092,1091,1,0,0,0,1093,161,1,0,0,0,1094,1098,5,158,0,0,1095,1097,
        3,160,80,0,1096,1095,1,0,0,0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,
        1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,1098,1,0,0,0,1101,1102,
        5,159,0,0,1102,163,1,0,0,0,1103,1104,5,153,0,0,1104,1107,5,166,0,
        0,1105,1106,5,162,0,0,1106,1108,3,186,93,0,1107,1105,1,0,0,0,1107,
        1108,1,0,0,0,1108,1123,1,0,0,0,1109,1110,5,153,0,0,1110,1115,5,166,
        0,0,1111,1112,5,164,0,0,1112,1114,5,166,0,0,1113,1111,1,0,0,0,1114,
        1117,1,0,0,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,1120,1,0,0,
        0,1117,1115,1,0,0,0,1118,1119,5,162,0,0,1119,1121,3,180,90,0,1120,
        1118,1,0,0,0,1120,1121,1,0,0,0,1121,1123,1,0,0,0,1122,1103,1,0,0,
        0,1122,1109,1,0,0,0,1123,165,1,0,0,0,1124,1125,3,178,89,0,1125,1126,
        5,162,0,0,1126,1127,3,186,93,0,1127,1139,1,0,0,0,1128,1131,3,178,
        89,0,1129,1130,5,164,0,0,1130,1132,3,178,89,0,1131,1129,1,0,0,0,
        1132,1133,1,0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1135,
        1,0,0,0,1135,1136,5,162,0,0,1136,1137,3,180,90,0,1137,1139,1,0,0,
        0,1138,1124,1,0,0,0,1138,1128,1,0,0,0,1139,167,1,0,0,0,1140,1141,
        5,151,0,0,1141,1142,3,186,93,0,1142,1143,3,162,81,0,1143,169,1,0,
        0,0,1144,1145,5,149,0,0,1145,1146,3,162,81,0,1146,1147,3,186,93,
        0,1147,1148,3,162,81,0,1148,1149,3,162,81,0,1149,171,1,0,0,0,1150,
        1151,5,145,0,0,1151,1152,3,184,92,0,1152,1153,3,162,81,0,1153,173,
        1,0,0,0,1154,1155,5,154,0,0,1155,1167,3,186,93,0,1156,1158,3,172,
        86,0,1157,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1157,1,0,0,0,1159,
        1160,1,0,0,0,1160,1163,1,0,0,0,1161,1162,5,147,0,0,1162,1164,3,162,
        81,0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,1168,1,0,0,0,1165,
        1166,5,147,0,0,1166,1168,3,162,81,0,1167,1157,1,0,0,0,1167,1165,
        1,0,0,0,1168,175,1,0,0,0,1169,1170,5,150,0,0,1170,1171,5,166,0,0,
        1171,1180,5,160,0,0,1172,1177,5,166,0,0,1173,1174,5,164,0,0,1174,
        1176,5,166,0,0,1175,1173,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,
        0,0,1177,1178,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,1180,1172,
        1,0,0,0,1180,1181,1,0,0,0,1181,1182,1,0,0,0,1182,1192,5,161,0,0,
        1183,1184,5,165,0,0,1184,1189,5,166,0,0,1185,1186,5,164,0,0,1186,
        1188,5,166,0,0,1187,1185,1,0,0,0,1188,1191,1,0,0,0,1189,1187,1,0,
        0,0,1189,1190,1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1192,1183,
        1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,1195,3,162,81,0,
        1195,177,1,0,0,0,1196,1201,5,166,0,0,1197,1198,5,163,0,0,1198,1200,
        7,17,0,0,1199,1197,1,0,0,0,1200,1203,1,0,0,0,1201,1199,1,0,0,0,1201,
        1202,1,0,0,0,1202,179,1,0,0,0,1203,1201,1,0,0,0,1204,1205,7,17,0,
        0,1205,1214,5,160,0,0,1206,1211,3,186,93,0,1207,1208,5,164,0,0,1208,
        1210,3,186,93,0,1209,1207,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,
        0,0,0,1211,1212,1,0,0,0,1212,1215,1,0,0,0,1213,1211,1,0,0,0,1214,
        1206,1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,1216,1217,5,161,
        0,0,1217,181,1,0,0,0,1218,1219,7,18,0,0,1219,183,1,0,0,0,1220,1226,
        5,168,0,0,1221,1226,5,169,0,0,1222,1226,5,167,0,0,1223,1226,3,182,
        91,0,1224,1226,5,170,0,0,1225,1220,1,0,0,0,1225,1221,1,0,0,0,1225,
        1222,1,0,0,0,1225,1223,1,0,0,0,1225,1224,1,0,0,0,1226,185,1,0,0,
        0,1227,1231,3,178,89,0,1228,1231,3,180,90,0,1229,1231,3,184,92,0,
        1230,1227,1,0,0,0,1230,1228,1,0,0,0,1230,1229,1,0,0,0,1231,187,1,
        0,0,0,141,201,203,212,220,232,239,249,255,260,266,274,280,291,302,
        307,321,333,336,344,347,350,359,364,373,378,381,386,393,395,409,
        414,420,424,432,434,442,446,452,455,459,461,466,471,479,481,489,
        493,503,505,510,518,534,544,556,558,564,577,580,590,593,597,603,
        613,616,631,636,641,644,651,659,664,669,680,685,687,695,699,723,
        725,773,779,783,790,799,802,809,811,818,822,826,837,849,859,864,
        869,876,878,899,903,912,918,922,925,957,963,967,973,979,995,998,
        1004,1015,1025,1032,1039,1043,1051,1057,1068,1073,1079,1092,1098,
        1107,1115,1120,1122,1133,1138,1159,1163,1167,1177,1180,1189,1192,
        1201,1211,1214,1225,1230
    ]

class SolidityParser ( Parser ):

    grammarFileName = "SolidityParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'abstract'", "'address'", 
                     "'anonymous'", "'as'", "'assembly'", "'bool'", "<INVALID>", 
                     "'bytes'", "'calldata'", "'catch'", "'constant'", "'constructor'", 
                     "<INVALID>", "'contract'", "'delete'", "'do'", "'else'", 
                     "'emit'", "'enum'", "'error'", "'event'", "'external'", 
                     "'fallback'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'from'", "<INVALID>", "'global'", "<INVALID>", 
                     "<INVALID>", "'immutable'", "'import'", "'indexed'", 
                     "'interface'", "'internal'", "'is'", "'library'", "'mapping'", 
                     "'memory'", "'modifier'", "'new'", "<INVALID>", "'override'", 
                     "'payable'", "'pragma'", "'private'", "'public'", "'pure'", 
                     "'receive'", "'return'", "'returns'", "'revert'", "<INVALID>", 
                     "'storage'", "'string'", "'struct'", "'transient'", 
                     "<INVALID>", "'try'", "'type'", "<INVALID>", "'unchecked'", 
                     "'unicode'", "<INVALID>", "'using'", "'view'", "'virtual'", 
                     "'while'", "<INVALID>", "<INVALID>", "'['", "']'", 
                     "<INVALID>", "<INVALID>", "':'", "<INVALID>", "<INVALID>", 
                     "'?'", "'=>'", "<INVALID>", "'='", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'>>>='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "<INVALID>", "'||'", "'&&'", 
                     "'|'", "'^'", "'&'", "'<<'", "'>>'", "'>>>'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'**'", "'=='", "'!='", 
                     "'<'", "'>'", "'<='", "'>='", "'!'", "'~'", "'++'", 
                     "'--'", "'\"'", "'''", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\"evmasm\"'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'case'", "<INVALID>", 
                     "'default'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'leave'", "'let'", "'switch'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':='" ]

    symbolicNames = [ "<INVALID>", "ReservedKeywords", "Abstract", "Address", 
                      "Anonymous", "As", "Assembly", "Bool", "Break", "Bytes", 
                      "Calldata", "Catch", "Constant", "Constructor", "Continue", 
                      "Contract", "Delete", "Do", "Else", "Emit", "Enum", 
                      "Error", "Event", "External", "Fallback", "FalseLiteral", 
                      "Fixed", "FixedBytes", "For", "From", "Function", 
                      "Global", "Hex", "If", "Immutable", "Import", "Indexed", 
                      "Interface", "Internal", "Is", "Library", "Mapping", 
                      "Memory", "Modifier", "New", "SubDenomination", "Override", 
                      "Payable", "Pragma", "Private", "Public", "Pure", 
                      "Receive", "Return", "Returns", "Revert", "SignedIntegerType", 
                      "Storage", "String", "Struct", "Transient", "TrueLiteral", 
                      "Try", "Type", "Ufixed", "Unchecked", "Unicode", "UnsignedIntegerType", 
                      "Using", "View", "Virtual", "While", "LParen", "RParen", 
                      "LBrack", "RBrack", "LBrace", "RBrace", "Colon", "Semicolon", 
                      "Period", "Conditional", "DoubleArrow", "RightArrow", 
                      "Assign", "AssignBitOr", "AssignBitXor", "AssignBitAnd", 
                      "AssignShl", "AssignSar", "AssignShr", "AssignAdd", 
                      "AssignSub", "AssignMul", "AssignDiv", "AssignMod", 
                      "Comma", "Or", "And", "BitOr", "BitXor", "BitAnd", 
                      "Shl", "Sar", "Shr", "Add", "Sub", "Mul", "Div", "Mod", 
                      "Exp", "Equal", "NotEqual", "LessThan", "GreaterThan", 
                      "LessThanOrEqual", "GreaterThanOrEqual", "Not", "BitNot", 
                      "Inc", "Dec", "DoubleQuote", "SingleQuote", "NonEmptyStringLiteral", 
                      "EmptyStringLiteral", "UnicodeStringLiteral", "HexString", 
                      "HexNumber", "OctalNumber", "DecimalNumber", "DecimalNumberFollowedByIdentifier", 
                      "Identifier", "WS", "COMMENT", "LINE_COMMENT", "AssemblyDialect", 
                      "AssemblyLBrace", "AssemblyFlagString", "AssemblyBlockLParen", 
                      "AssemblyBlockRParen", "AssemblyBlockComma", "AssemblyBlockWS", 
                      "AssemblyBlockCOMMENT", "AssemblyBlockLINE_COMMENT", 
                      "YulBreak", "YulCase", "YulContinue", "YulDefault", 
                      "YulFalse", "YulFor", "YulFunction", "YulIf", "YulLeave", 
                      "YulLet", "YulSwitch", "YulTrue", "YulHex", "YulEVMBuiltin", 
                      "YulLBrace", "YulRBrace", "YulLParen", "YulRParen", 
                      "YulAssign", "YulPeriod", "YulComma", "YulArrow", 
                      "YulIdentifier", "YulHexNumber", "YulDecimalNumber", 
                      "YulStringLiteral", "YulHexStringLiteral", "YulWS", 
                      "YulCOMMENT", "YulLINE_COMMENT", "PragmaToken", "PragmaSemicolon", 
                      "PragmaWS", "PragmaCOMMENT", "PragmaLINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_importDirective = 2
    RULE_importAliases = 3
    RULE_path = 4
    RULE_symbolAliases = 5
    RULE_contractDefinition = 6
    RULE_interfaceDefinition = 7
    RULE_libraryDefinition = 8
    RULE_inheritanceSpecifierList = 9
    RULE_inheritanceSpecifier = 10
    RULE_contractBodyElement = 11
    RULE_namedArgument = 12
    RULE_callArgumentList = 13
    RULE_identifierPath = 14
    RULE_modifierInvocation = 15
    RULE_visibility = 16
    RULE_parameterList = 17
    RULE_parameterDeclaration = 18
    RULE_constructorDefinition = 19
    RULE_stateMutability = 20
    RULE_overrideSpecifier = 21
    RULE_functionDefinition = 22
    RULE_modifierDefinition = 23
    RULE_fallbackFunctionDefinition = 24
    RULE_receiveFunctionDefinition = 25
    RULE_structDefinition = 26
    RULE_structMember = 27
    RULE_enumDefinition = 28
    RULE_userDefinedValueTypeDefinition = 29
    RULE_stateVariableDeclaration = 30
    RULE_constantVariableDeclaration = 31
    RULE_eventParameter = 32
    RULE_eventDefinition = 33
    RULE_errorParameter = 34
    RULE_errorDefinition = 35
    RULE_userDefinableOperator = 36
    RULE_usingDirective = 37
    RULE_usingAliases = 38
    RULE_typeName = 39
    RULE_elementaryTypeName = 40
    RULE_addressPayable = 41
    RULE_functionTypeName = 42
    RULE_variableDeclaration = 43
    RULE_dataLocation = 44
    RULE_expression = 45
    RULE_assignOp = 46
    RULE_tupleExpression = 47
    RULE_inlineArrayExpression = 48
    RULE_identifier = 49
    RULE_literal = 50
    RULE_literalWithSubDenomination = 51
    RULE_boolLiteral = 52
    RULE_stringLiteral = 53
    RULE_hexStringLiteral = 54
    RULE_unicodeStringLiteral = 55
    RULE_numberLiteral = 56
    RULE_block = 57
    RULE_uncheckedBlock = 58
    RULE_statement = 59
    RULE_simpleStatement = 60
    RULE_ifStatement = 61
    RULE_forStatement = 62
    RULE_whileStatement = 63
    RULE_doWhileStatement = 64
    RULE_continueStatement = 65
    RULE_breakStatement = 66
    RULE_tryStatement = 67
    RULE_catchClause = 68
    RULE_returnStatement = 69
    RULE_emitStatement = 70
    RULE_revertStatement = 71
    RULE_assemblyStatement = 72
    RULE_assemblyFlags = 73
    RULE_variableDeclarationList = 74
    RULE_variableDeclarationTuple = 75
    RULE_variableDeclarationStatement = 76
    RULE_expressionStatement = 77
    RULE_mappingType = 78
    RULE_mappingKeyType = 79
    RULE_yulStatement = 80
    RULE_yulBlock = 81
    RULE_yulVariableDeclaration = 82
    RULE_yulAssignment = 83
    RULE_yulIfStatement = 84
    RULE_yulForStatement = 85
    RULE_yulSwitchCase = 86
    RULE_yulSwitchStatement = 87
    RULE_yulFunctionDefinition = 88
    RULE_yulPath = 89
    RULE_yulFunctionCall = 90
    RULE_yulbool = 91
    RULE_yulLiteral = 92
    RULE_yulExpression = 93

    ruleNames =  [ "sourceUnit", "pragmaDirective", "importDirective", "importAliases", 
                   "path", "symbolAliases", "contractDefinition", "interfaceDefinition", 
                   "libraryDefinition", "inheritanceSpecifierList", "inheritanceSpecifier", 
                   "contractBodyElement", "namedArgument", "callArgumentList", 
                   "identifierPath", "modifierInvocation", "visibility", 
                   "parameterList", "parameterDeclaration", "constructorDefinition", 
                   "stateMutability", "overrideSpecifier", "functionDefinition", 
                   "modifierDefinition", "fallbackFunctionDefinition", "receiveFunctionDefinition", 
                   "structDefinition", "structMember", "enumDefinition", 
                   "userDefinedValueTypeDefinition", "stateVariableDeclaration", 
                   "constantVariableDeclaration", "eventParameter", "eventDefinition", 
                   "errorParameter", "errorDefinition", "userDefinableOperator", 
                   "usingDirective", "usingAliases", "typeName", "elementaryTypeName", 
                   "addressPayable", "functionTypeName", "variableDeclaration", 
                   "dataLocation", "expression", "assignOp", "tupleExpression", 
                   "inlineArrayExpression", "identifier", "literal", "literalWithSubDenomination", 
                   "boolLiteral", "stringLiteral", "hexStringLiteral", "unicodeStringLiteral", 
                   "numberLiteral", "block", "uncheckedBlock", "statement", 
                   "simpleStatement", "ifStatement", "forStatement", "whileStatement", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "tryStatement", "catchClause", "returnStatement", "emitStatement", 
                   "revertStatement", "assemblyStatement", "assemblyFlags", 
                   "variableDeclarationList", "variableDeclarationTuple", 
                   "variableDeclarationStatement", "expressionStatement", 
                   "mappingType", "mappingKeyType", "yulStatement", "yulBlock", 
                   "yulVariableDeclaration", "yulAssignment", "yulIfStatement", 
                   "yulForStatement", "yulSwitchCase", "yulSwitchStatement", 
                   "yulFunctionDefinition", "yulPath", "yulFunctionCall", 
                   "yulbool", "yulLiteral", "yulExpression" ]

    EOF = Token.EOF
    ReservedKeywords=1
    Abstract=2
    Address=3
    Anonymous=4
    As=5
    Assembly=6
    Bool=7
    Break=8
    Bytes=9
    Calldata=10
    Catch=11
    Constant=12
    Constructor=13
    Continue=14
    Contract=15
    Delete=16
    Do=17
    Else=18
    Emit=19
    Enum=20
    Error=21
    Event=22
    External=23
    Fallback=24
    FalseLiteral=25
    Fixed=26
    FixedBytes=27
    For=28
    From=29
    Function=30
    Global=31
    Hex=32
    If=33
    Immutable=34
    Import=35
    Indexed=36
    Interface=37
    Internal=38
    Is=39
    Library=40
    Mapping=41
    Memory=42
    Modifier=43
    New=44
    SubDenomination=45
    Override=46
    Payable=47
    Pragma=48
    Private=49
    Public=50
    Pure=51
    Receive=52
    Return=53
    Returns=54
    Revert=55
    SignedIntegerType=56
    Storage=57
    String=58
    Struct=59
    Transient=60
    TrueLiteral=61
    Try=62
    Type=63
    Ufixed=64
    Unchecked=65
    Unicode=66
    UnsignedIntegerType=67
    Using=68
    View=69
    Virtual=70
    While=71
    LParen=72
    RParen=73
    LBrack=74
    RBrack=75
    LBrace=76
    RBrace=77
    Colon=78
    Semicolon=79
    Period=80
    Conditional=81
    DoubleArrow=82
    RightArrow=83
    Assign=84
    AssignBitOr=85
    AssignBitXor=86
    AssignBitAnd=87
    AssignShl=88
    AssignSar=89
    AssignShr=90
    AssignAdd=91
    AssignSub=92
    AssignMul=93
    AssignDiv=94
    AssignMod=95
    Comma=96
    Or=97
    And=98
    BitOr=99
    BitXor=100
    BitAnd=101
    Shl=102
    Sar=103
    Shr=104
    Add=105
    Sub=106
    Mul=107
    Div=108
    Mod=109
    Exp=110
    Equal=111
    NotEqual=112
    LessThan=113
    GreaterThan=114
    LessThanOrEqual=115
    GreaterThanOrEqual=116
    Not=117
    BitNot=118
    Inc=119
    Dec=120
    DoubleQuote=121
    SingleQuote=122
    NonEmptyStringLiteral=123
    EmptyStringLiteral=124
    UnicodeStringLiteral=125
    HexString=126
    HexNumber=127
    OctalNumber=128
    DecimalNumber=129
    DecimalNumberFollowedByIdentifier=130
    Identifier=131
    WS=132
    COMMENT=133
    LINE_COMMENT=134
    AssemblyDialect=135
    AssemblyLBrace=136
    AssemblyFlagString=137
    AssemblyBlockLParen=138
    AssemblyBlockRParen=139
    AssemblyBlockComma=140
    AssemblyBlockWS=141
    AssemblyBlockCOMMENT=142
    AssemblyBlockLINE_COMMENT=143
    YulBreak=144
    YulCase=145
    YulContinue=146
    YulDefault=147
    YulFalse=148
    YulFor=149
    YulFunction=150
    YulIf=151
    YulLeave=152
    YulLet=153
    YulSwitch=154
    YulTrue=155
    YulHex=156
    YulEVMBuiltin=157
    YulLBrace=158
    YulRBrace=159
    YulLParen=160
    YulRParen=161
    YulAssign=162
    YulPeriod=163
    YulComma=164
    YulArrow=165
    YulIdentifier=166
    YulHexNumber=167
    YulDecimalNumber=168
    YulStringLiteral=169
    YulHexStringLiteral=170
    YulWS=171
    YulCOMMENT=172
    YulLINE_COMMENT=173
    PragmaToken=174
    PragmaSemicolon=175
    PragmaWS=176
    PragmaCOMMENT=177
    PragmaLINE_COMMENT=178

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def usingDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def interfaceDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InterfaceDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InterfaceDefinitionContext,i)


        def libraryDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LibraryDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LibraryDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def constantVariableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ConstantVariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ConstantVariableDeclarationContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def userDefinedValueTypeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedValueTypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,i)


        def errorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,i)


        def eventDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -7097388063458819444) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25) != 0) or _la==131:
                self.state = 201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 188
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 189
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 190
                    self.usingDirective()
                    pass

                elif la_ == 4:
                    self.state = 191
                    self.contractDefinition()
                    pass

                elif la_ == 5:
                    self.state = 192
                    self.interfaceDefinition()
                    pass

                elif la_ == 6:
                    self.state = 193
                    self.libraryDefinition()
                    pass

                elif la_ == 7:
                    self.state = 194
                    self.functionDefinition()
                    pass

                elif la_ == 8:
                    self.state = 195
                    self.constantVariableDeclaration()
                    pass

                elif la_ == 9:
                    self.state = 196
                    self.structDefinition()
                    pass

                elif la_ == 10:
                    self.state = 197
                    self.enumDefinition()
                    pass

                elif la_ == 11:
                    self.state = 198
                    self.userDefinedValueTypeDefinition()
                    pass

                elif la_ == 12:
                    self.state = 199
                    self.errorDefinition()
                    pass

                elif la_ == 13:
                    self.state = 200
                    self.eventDefinition()
                    pass


                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pragma(self):
            return self.getToken(SolidityParser.Pragma, 0)

        def PragmaSemicolon(self):
            return self.getToken(SolidityParser.PragmaSemicolon, 0)

        def PragmaToken(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PragmaToken)
            else:
                return self.getToken(SolidityParser.PragmaToken, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(SolidityParser.Pragma)
            self.state = 210 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 209
                self.match(SolidityParser.PragmaToken)
                self.state = 212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==174):
                    break

            self.state = 214
            self.match(SolidityParser.PragmaSemicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unitAlias = None # IdentifierContext

        def Import(self):
            return self.getToken(SolidityParser.Import, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def path(self):
            return self.getTypedRuleContext(SolidityParser.PathContext,0)


        def symbolAliases(self):
            return self.getTypedRuleContext(SolidityParser.SymbolAliasesContext,0)


        def From(self):
            return self.getToken(SolidityParser.From, 0)

        def Mul(self):
            return self.getToken(SolidityParser.Mul, 0)

        def As(self):
            return self.getToken(SolidityParser.As, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(SolidityParser.Import)
            self.state = 232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.state = 217
                self.path()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 218
                    self.match(SolidityParser.As)
                    self.state = 219
                    localctx.unitAlias = self.identifier()


                pass
            elif token in [76]:
                self.state = 222
                self.symbolAliases()
                self.state = 223
                self.match(SolidityParser.From)
                self.state = 224
                self.path()
                pass
            elif token in [107]:
                self.state = 226
                self.match(SolidityParser.Mul)
                self.state = 227
                self.match(SolidityParser.As)
                self.state = 228
                localctx.unitAlias = self.identifier()
                self.state = 229
                self.match(SolidityParser.From)
                self.state = 230
                self.path()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 234
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.symbol = None # IdentifierContext
            self.alias = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def As(self):
            return self.getToken(SolidityParser.As, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAliases" ):
                listener.enterImportAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAliases" ):
                listener.exitImportAliases(self)




    def importAliases(self):

        localctx = SolidityParser.ImportAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            localctx.symbol = self.identifier()
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 237
                self.match(SolidityParser.As)
                self.state = 238
                localctx.alias = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NonEmptyStringLiteral(self):
            return self.getToken(SolidityParser.NonEmptyStringLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = SolidityParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(SolidityParser.NonEmptyStringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._importAliases = None # ImportAliasesContext
            self.aliases = list() # of ImportAliasesContexts

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def importAliases(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportAliasesContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportAliasesContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_symbolAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolAliases" ):
                listener.enterSymbolAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolAliases" ):
                listener.exitSymbolAliases(self)




    def symbolAliases(self):

        localctx = SolidityParser.SymbolAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_symbolAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(SolidityParser.LBrace)
            self.state = 244
            localctx._importAliases = self.importAliases()
            localctx.aliases.append(localctx._importAliases)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 245
                self.match(SolidityParser.Comma)
                self.state = 246
                localctx._importAliases = self.importAliases()
                localctx.aliases.append(localctx._importAliases)
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 252
            self.match(SolidityParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def Contract(self):
            return self.getToken(SolidityParser.Contract, 0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def Abstract(self):
            return self.getToken(SolidityParser.Abstract, 0)

        def inheritanceSpecifierList(self):
            return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierListContext,0)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 254
                self.match(SolidityParser.Abstract)


            self.state = 257
            self.match(SolidityParser.Contract)
            self.state = 258
            localctx.name = self.identifier()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 259
                self.inheritanceSpecifierList()


            self.state = 262
            self.match(SolidityParser.LBrace)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -7093158414008704376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25) != 0) or _la==131:
                self.state = 263
                self.contractBodyElement()
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 269
            self.match(SolidityParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def Interface(self):
            return self.getToken(SolidityParser.Interface, 0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifierList(self):
            return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierListContext,0)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interfaceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDefinition" ):
                listener.enterInterfaceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDefinition" ):
                listener.exitInterfaceDefinition(self)




    def interfaceDefinition(self):

        localctx = SolidityParser.InterfaceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_interfaceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(SolidityParser.Interface)
            self.state = 272
            localctx.name = self.identifier()
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 273
                self.inheritanceSpecifierList()


            self.state = 276
            self.match(SolidityParser.LBrace)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -7093158414008704376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25) != 0) or _la==131:
                self.state = 277
                self.contractBodyElement()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 283
            self.match(SolidityParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def Library(self):
            return self.getToken(SolidityParser.Library, 0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_libraryDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDefinition" ):
                listener.enterLibraryDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDefinition" ):
                listener.exitLibraryDefinition(self)




    def libraryDefinition(self):

        localctx = SolidityParser.LibraryDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_libraryDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(SolidityParser.Library)
            self.state = 286
            localctx.name = self.identifier()
            self.state = 287
            self.match(SolidityParser.LBrace)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -7093158414008704376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 25) != 0) or _la==131:
                self.state = 288
                self.contractBodyElement()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 294
            self.match(SolidityParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._inheritanceSpecifier = None # InheritanceSpecifierContext
            self.inheritanceSpecifiers = list() # of InheritanceSpecifierContexts

        def Is(self):
            return self.getToken(SolidityParser.Is, 0)

        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifierList" ):
                listener.enterInheritanceSpecifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifierList" ):
                listener.exitInheritanceSpecifierList(self)




    def inheritanceSpecifierList(self):

        localctx = SolidityParser.InheritanceSpecifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_inheritanceSpecifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(SolidityParser.Is)
            self.state = 297
            localctx._inheritanceSpecifier = self.inheritanceSpecifier()
            localctx.inheritanceSpecifiers.append(localctx._inheritanceSpecifier)
            self.state = 302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 298
                    self.match(SolidityParser.Comma)
                    self.state = 299
                    localctx._inheritanceSpecifier = self.inheritanceSpecifier()
                    localctx.inheritanceSpecifiers.append(localctx._inheritanceSpecifier) 
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierPathContext
            self.arguments = None # CallArgumentListContext

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            localctx.name = self.identifierPath()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 306
                localctx.arguments = self.callArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractBodyElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def fallbackFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FallbackFunctionDefinitionContext,0)


        def receiveFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ReceiveFunctionDefinitionContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def userDefinedValueTypeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,0)


        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def errorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,0)


        def usingDirective(self):
            return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractBodyElement" ):
                listener.enterContractBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractBodyElement" ):
                listener.exitContractBodyElement(self)




    def contractBodyElement(self):

        localctx = SolidityParser.ContractBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractBodyElement)
        try:
            self.state = 321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.constructorDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 310
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 311
                self.modifierDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 312
                self.fallbackFunctionDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 313
                self.receiveFunctionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 314
                self.structDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 315
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 316
                self.userDefinedValueTypeDefinition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 317
                self.stateVariableDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 318
                self.eventDefinition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 319
                self.errorDefinition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 320
                self.usingDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self.value = None # ExpressionContext

        def Colon(self):
            return self.getToken(SolidityParser.Colon, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_namedArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)




    def namedArgument(self):

        localctx = SolidityParser.NamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_namedArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            localctx.name = self.identifier()
            self.state = 324
            self.match(SolidityParser.Colon)
            self.state = 325
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def namedArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NamedArgumentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_callArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallArgumentList" ):
                listener.enterCallArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallArgumentList" ):
                listener.exitCallArgumentList(self)




    def callArgumentList(self):

        localctx = SolidityParser.CallArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_callArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(SolidityParser.LParen)
            self.state = 350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 7, 9, 16, 21, 25, 26, 27, 29, 31, 44, 47, 55, 56, 58, 60, 61, 63, 64, 67, 72, 73, 74, 106, 117, 118, 119, 120, 123, 124, 125, 126, 127, 129, 131]:
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                    self.state = 328
                    self.expression(0)
                    self.state = 333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==96:
                        self.state = 329
                        self.match(SolidityParser.Comma)
                        self.state = 330
                        self.expression(0)
                        self.state = 335
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [76]:
                self.state = 338
                self.match(SolidityParser.LBrace)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                    self.state = 339
                    self.namedArgument()
                    self.state = 344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==96:
                        self.state = 340
                        self.match(SolidityParser.Comma)
                        self.state = 341
                        self.namedArgument()
                        self.state = 346
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 349
                self.match(SolidityParser.RBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 352
            self.match(SolidityParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def Period(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Period)
            else:
                return self.getToken(SolidityParser.Period, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifierPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierPath" ):
                listener.enterIdentifierPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierPath" ):
                listener.exitIdentifierPath(self)




    def identifierPath(self):

        localctx = SolidityParser.IdentifierPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_identifierPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.identifier()
            self.state = 359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 355
                    self.match(SolidityParser.Period)
                    self.state = 356
                    self.identifier() 
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.identifierPath()
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 363
                self.callArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Internal(self):
            return self.getToken(SolidityParser.Internal, 0)

        def External(self):
            return self.getToken(SolidityParser.External, 0)

        def Private(self):
            return self.getToken(SolidityParser.Private, 0)

        def Public(self):
            return self.getToken(SolidityParser.Public, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = SolidityParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1689124746559488) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._parameterDeclaration = None # ParameterDeclarationContext
            self.parameters = list() # of ParameterDeclarationContexts

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            localctx._parameterDeclaration = self.parameterDeclaration()
            localctx.parameters.append(localctx._parameterDeclaration)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 369
                self.match(SolidityParser.Comma)
                self.state = 370
                localctx._parameterDeclaration = self.parameterDeclaration()
                localctx.parameters.append(localctx._parameterDeclaration)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # TypeNameContext
            self.location = None # DataLocationContext
            self.name = None # IdentifierContext

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def dataLocation(self):
            return self.getTypedRuleContext(SolidityParser.DataLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = SolidityParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            localctx.type_ = self.typeName(0)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144119586122368000) != 0):
                self.state = 377
                localctx.location = self.dataLocation()


            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                self.state = 380
                localctx.name = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arguments = None # ParameterListContext
            self.body = None # BlockContext

        def Constructor(self):
            return self.getToken(SolidityParser.Constructor, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def Payable(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Payable)
            else:
                return self.getToken(SolidityParser.Payable, i)

        def Internal(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Internal)
            else:
                return self.getToken(SolidityParser.Internal, i)

        def Public(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Public)
            else:
                return self.getToken(SolidityParser.Public, i)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = SolidityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constructorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(SolidityParser.Constructor)
            self.state = 384
            self.match(SolidityParser.LParen)
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                self.state = 385
                localctx.arguments = self.parameterList()


            self.state = 388
            self.match(SolidityParser.RParen)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1190217216585367552) != 0) or _la==131:
                self.state = 393
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [21, 29, 31, 55, 60, 131]:
                    self.state = 389
                    self.modifierInvocation()
                    pass
                elif token in [47]:
                    self.state = 390
                    self.match(SolidityParser.Payable)
                    pass
                elif token in [38]:
                    self.state = 391
                    self.match(SolidityParser.Internal)
                    pass
                elif token in [50]:
                    self.state = 392
                    self.match(SolidityParser.Public)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            localctx.body = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pure(self):
            return self.getToken(SolidityParser.Pure, 0)

        def View(self):
            return self.getToken(SolidityParser.View, 0)

        def Payable(self):
            return self.getToken(SolidityParser.Payable, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            _la = self._input.LA(1)
            if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & 4194321) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifierPath = None # IdentifierPathContext
            self.overrides = list() # of IdentifierPathContexts

        def Override(self):
            return self.getToken(SolidityParser.Override, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def identifierPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(SolidityParser.Override)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 403
                self.match(SolidityParser.LParen)
                self.state = 404
                localctx._identifierPath = self.identifierPath()
                localctx.overrides.append(localctx._identifierPath)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==96:
                    self.state = 405
                    self.match(SolidityParser.Comma)
                    self.state = 406
                    localctx._identifierPath = self.identifierPath()
                    localctx.overrides.append(localctx._identifierPath)
                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 412
                self.match(SolidityParser.RParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arguments = None # ParameterListContext
            self.returnParameters = None # ParameterListContext
            self.body = None # BlockContext

        def Function(self):
            return self.getToken(SolidityParser.Function, 0)

        def LParen(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.LParen)
            else:
                return self.getToken(SolidityParser.LParen, i)

        def RParen(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.RParen)
            else:
                return self.getToken(SolidityParser.RParen, i)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def Fallback(self):
            return self.getToken(SolidityParser.Fallback, 0)

        def Receive(self):
            return self.getToken(SolidityParser.Receive, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def Virtual(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Virtual)
            else:
                return self.getToken(SolidityParser.Virtual, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def Returns(self):
            return self.getToken(SolidityParser.Returns, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(SolidityParser.Function)
            self.state = 420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 29, 31, 55, 60, 131]:
                self.state = 417
                self.identifier()
                pass
            elif token in [24]:
                self.state = 418
                self.match(SolidityParser.Fallback)
                pass
            elif token in [52]:
                self.state = 419
                self.match(SolidityParser.Receive)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 422
            self.match(SolidityParser.LParen)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                self.state = 423
                localctx.arguments = self.parameterList()


            self.state = 426
            self.match(SolidityParser.RParen)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1193102335105040384) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 4611686018427387907) != 0):
                self.state = 432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23, 38, 49, 50]:
                    self.state = 427
                    self.visibility()
                    pass
                elif token in [47, 51, 69]:
                    self.state = 428
                    self.stateMutability()
                    pass
                elif token in [21, 29, 31, 55, 60, 131]:
                    self.state = 429
                    self.modifierInvocation()
                    pass
                elif token in [70]:
                    self.state = 430
                    self.match(SolidityParser.Virtual)
                    pass
                elif token in [46]:
                    self.state = 431
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 437
                self.match(SolidityParser.Returns)
                self.state = 438
                self.match(SolidityParser.LParen)
                self.state = 439
                localctx.returnParameters = self.parameterList()
                self.state = 440
                self.match(SolidityParser.RParen)


            self.state = 446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.state = 444
                self.match(SolidityParser.Semicolon)
                pass
            elif token in [76]:
                self.state = 445
                localctx.body = self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self.arguments = None # ParameterListContext
            self.body = None # BlockContext

        def Modifier(self):
            return self.getToken(SolidityParser.Modifier, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def Virtual(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Virtual)
            else:
                return self.getToken(SolidityParser.Virtual, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(SolidityParser.Modifier)
            self.state = 449
            localctx.name = self.identifier()
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 450
                self.match(SolidityParser.LParen)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                    self.state = 451
                    localctx.arguments = self.parameterList()


                self.state = 454
                self.match(SolidityParser.RParen)


            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46 or _la==70:
                self.state = 459
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [70]:
                    self.state = 457
                    self.match(SolidityParser.Virtual)
                    pass
                elif token in [46]:
                    self.state = 458
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.state = 464
                self.match(SolidityParser.Semicolon)
                pass
            elif token in [76]:
                self.state = 465
                localctx.body = self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallbackFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.returnParameters = None # ParameterListContext
            self.body = None # BlockContext

        def LParen(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.LParen)
            else:
                return self.getToken(SolidityParser.LParen, i)

        def RParen(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.RParen)
            else:
                return self.getToken(SolidityParser.RParen, i)

        def Fallback(self):
            return self.getToken(SolidityParser.Fallback, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def External(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.External)
            else:
                return self.getToken(SolidityParser.External, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def Virtual(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Virtual)
            else:
                return self.getToken(SolidityParser.Virtual, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def Returns(self):
            return self.getToken(SolidityParser.Returns, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_fallbackFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallbackFunctionDefinition" ):
                listener.enterFallbackFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallbackFunctionDefinition" ):
                listener.exitFallbackFunctionDefinition(self)




    def fallbackFunctionDefinition(self):

        localctx = SolidityParser.FallbackFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fallbackFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            localctx.kind = self.match(SolidityParser.Fallback)
            self.state = 469
            self.match(SolidityParser.LParen)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                self.state = 470
                self.parameterList()


            self.state = 473
            self.match(SolidityParser.RParen)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1191413210366869504) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 4611686018427387907) != 0):
                self.state = 479
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 474
                    self.match(SolidityParser.External)
                    pass
                elif token in [47, 51, 69]:
                    self.state = 475
                    self.stateMutability()
                    pass
                elif token in [21, 29, 31, 55, 60, 131]:
                    self.state = 476
                    self.modifierInvocation()
                    pass
                elif token in [70]:
                    self.state = 477
                    self.match(SolidityParser.Virtual)
                    pass
                elif token in [46]:
                    self.state = 478
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 484
                self.match(SolidityParser.Returns)
                self.state = 485
                self.match(SolidityParser.LParen)
                self.state = 486
                localctx.returnParameters = self.parameterList()
                self.state = 487
                self.match(SolidityParser.RParen)


            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.state = 491
                self.match(SolidityParser.Semicolon)
                pass
            elif token in [76]:
                self.state = 492
                localctx.body = self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.body = None # BlockContext

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def Receive(self):
            return self.getToken(SolidityParser.Receive, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def External(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.External)
            else:
                return self.getToken(SolidityParser.External, i)

        def Payable(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Payable)
            else:
                return self.getToken(SolidityParser.Payable, i)

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def Virtual(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Virtual)
            else:
                return self.getToken(SolidityParser.Virtual, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_receiveFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveFunctionDefinition" ):
                listener.enterReceiveFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveFunctionDefinition" ):
                listener.exitReceiveFunctionDefinition(self)




    def receiveFunctionDefinition(self):

        localctx = SolidityParser.ReceiveFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_receiveFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            localctx.kind = self.match(SolidityParser.Receive)
            self.state = 496
            self.match(SolidityParser.LParen)
            self.state = 497
            self.match(SolidityParser.RParen)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1189161410553184256) != 0) or _la==70 or _la==131:
                self.state = 503
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 498
                    self.match(SolidityParser.External)
                    pass
                elif token in [47]:
                    self.state = 499
                    self.match(SolidityParser.Payable)
                    pass
                elif token in [21, 29, 31, 55, 60, 131]:
                    self.state = 500
                    self.modifierInvocation()
                    pass
                elif token in [70]:
                    self.state = 501
                    self.match(SolidityParser.Virtual)
                    pass
                elif token in [46]:
                    self.state = 502
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.state = 508
                self.match(SolidityParser.Semicolon)
                pass
            elif token in [76]:
                self.state = 509
                localctx.body = self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self.members = None # StructMemberContext

        def Struct(self):
            return self.getToken(SolidityParser.Struct, 0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructMemberContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(SolidityParser.Struct)
            self.state = 513
            localctx.name = self.identifier()
            self.state = 514
            self.match(SolidityParser.LBrace)
            self.state = 516 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 515
                localctx.members = self.structMember()
                self.state = 518 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131):
                    break

            self.state = 520
            self.match(SolidityParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # TypeNameContext
            self.name = None # IdentifierContext

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_structMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructMember" ):
                listener.enterStructMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructMember" ):
                listener.exitStructMember(self)




    def structMember(self):

        localctx = SolidityParser.StructMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_structMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            localctx.type_ = self.typeName(0)
            self.state = 523
            localctx.name = self.identifier()
            self.state = 524
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.enumValues = list() # of IdentifierContexts

        def Enum(self):
            return self.getToken(SolidityParser.Enum, 0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(SolidityParser.Enum)
            self.state = 527
            localctx.name = self.identifier()
            self.state = 528
            self.match(SolidityParser.LBrace)
            self.state = 529
            localctx._identifier = self.identifier()
            localctx.enumValues.append(localctx._identifier)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 530
                self.match(SolidityParser.Comma)
                self.state = 531
                localctx._identifier = self.identifier()
                localctx.enumValues.append(localctx._identifier)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 537
            self.match(SolidityParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedValueTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def Type(self):
            return self.getToken(SolidityParser.Type, 0)

        def Is(self):
            return self.getToken(SolidityParser.Is, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def addressPayable(self):
            return self.getTypedRuleContext(SolidityParser.AddressPayableContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedValueTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedValueTypeDefinition" ):
                listener.enterUserDefinedValueTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedValueTypeDefinition" ):
                listener.exitUserDefinedValueTypeDefinition(self)




    def userDefinedValueTypeDefinition(self):

        localctx = SolidityParser.UserDefinedValueTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_userDefinedValueTypeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(SolidityParser.Type)
            self.state = 540
            localctx.name = self.identifier()
            self.state = 541
            self.match(SolidityParser.Is)
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 542
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 543
                self.addressPayable()
                pass


            self.state = 546
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # TypeNameContext
            self.name = None # IdentifierContext
            self.initialValue = None # ExpressionContext

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def Public(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Public)
            else:
                return self.getToken(SolidityParser.Public, i)

        def Private(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Private)
            else:
                return self.getToken(SolidityParser.Private, i)

        def Internal(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Internal)
            else:
                return self.getToken(SolidityParser.Internal, i)

        def Constant(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Constant)
            else:
                return self.getToken(SolidityParser.Constant, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def Immutable(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Immutable)
            else:
                return self.getToken(SolidityParser.Immutable, i)

        def Transient(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Transient)
            else:
                return self.getToken(SolidityParser.Transient, i)

        def Assign(self):
            return self.getToken(SolidityParser.Assign, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            localctx.type_ = self.typeName(0)
            self.state = 558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 556
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [50]:
                        self.state = 549
                        self.match(SolidityParser.Public)
                        pass
                    elif token in [49]:
                        self.state = 550
                        self.match(SolidityParser.Private)
                        pass
                    elif token in [38]:
                        self.state = 551
                        self.match(SolidityParser.Internal)
                        pass
                    elif token in [12]:
                        self.state = 552
                        self.match(SolidityParser.Constant)
                        pass
                    elif token in [46]:
                        self.state = 553
                        self.overrideSpecifier()
                        pass
                    elif token in [34]:
                        self.state = 554
                        self.match(SolidityParser.Immutable)
                        pass
                    elif token in [60]:
                        self.state = 555
                        self.match(SolidityParser.Transient)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 561
            localctx.name = self.identifier()
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 562
                self.match(SolidityParser.Assign)
                self.state = 563
                localctx.initialValue = self.expression(0)


            self.state = 566
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # TypeNameContext
            self.name = None # IdentifierContext
            self.initialValue = None # ExpressionContext

        def Constant(self):
            return self.getToken(SolidityParser.Constant, 0)

        def Assign(self):
            return self.getToken(SolidityParser.Assign, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constantVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantVariableDeclaration" ):
                listener.enterConstantVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantVariableDeclaration" ):
                listener.exitConstantVariableDeclaration(self)




    def constantVariableDeclaration(self):

        localctx = SolidityParser.ConstantVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constantVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            localctx.type_ = self.typeName(0)
            self.state = 569
            self.match(SolidityParser.Constant)
            self.state = 570
            localctx.name = self.identifier()
            self.state = 571
            self.match(SolidityParser.Assign)
            self.state = 572
            localctx.initialValue = self.expression(0)
            self.state = 573
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # TypeNameContext
            self.name = None # IdentifierContext

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def Indexed(self):
            return self.getToken(SolidityParser.Indexed, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            localctx.type_ = self.typeName(0)
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 576
                self.match(SolidityParser.Indexed)


            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                self.state = 579
                localctx.name = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._eventParameter = None # EventParameterContext
            self.parameters = list() # of EventParameterContexts

        def Event(self):
            return self.getToken(SolidityParser.Event, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def Anonymous(self):
            return self.getToken(SolidityParser.Anonymous, 0)

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(SolidityParser.Event)
            self.state = 583
            localctx.name = self.identifier()
            self.state = 584
            self.match(SolidityParser.LParen)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                self.state = 585
                localctx._eventParameter = self.eventParameter()
                localctx.parameters.append(localctx._eventParameter)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==96:
                    self.state = 586
                    self.match(SolidityParser.Comma)
                    self.state = 587
                    localctx._eventParameter = self.eventParameter()
                    localctx.parameters.append(localctx._eventParameter)
                    self.state = 592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 595
            self.match(SolidityParser.RParen)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 596
                self.match(SolidityParser.Anonymous)


            self.state = 599
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # TypeNameContext
            self.name = None # IdentifierContext

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_errorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorParameter" ):
                listener.enterErrorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorParameter" ):
                listener.exitErrorParameter(self)




    def errorParameter(self):

        localctx = SolidityParser.ErrorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_errorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            localctx.type_ = self.typeName(0)
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                self.state = 602
                localctx.name = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._errorParameter = None # ErrorParameterContext
            self.parameters = list() # of ErrorParameterContexts

        def Error(self):
            return self.getToken(SolidityParser.Error, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def errorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ErrorParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ErrorParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_errorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorDefinition" ):
                listener.enterErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorDefinition" ):
                listener.exitErrorDefinition(self)




    def errorDefinition(self):

        localctx = SolidityParser.ErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_errorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(SolidityParser.Error)
            self.state = 606
            localctx.name = self.identifier()
            self.state = 607
            self.match(SolidityParser.LParen)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                self.state = 608
                localctx._errorParameter = self.errorParameter()
                localctx.parameters.append(localctx._errorParameter)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==96:
                    self.state = 609
                    self.match(SolidityParser.Comma)
                    self.state = 610
                    localctx._errorParameter = self.errorParameter()
                    localctx.parameters.append(localctx._errorParameter)
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 618
            self.match(SolidityParser.RParen)
            self.state = 619
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinableOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BitAnd(self):
            return self.getToken(SolidityParser.BitAnd, 0)

        def BitNot(self):
            return self.getToken(SolidityParser.BitNot, 0)

        def BitOr(self):
            return self.getToken(SolidityParser.BitOr, 0)

        def BitXor(self):
            return self.getToken(SolidityParser.BitXor, 0)

        def Add(self):
            return self.getToken(SolidityParser.Add, 0)

        def Div(self):
            return self.getToken(SolidityParser.Div, 0)

        def Mod(self):
            return self.getToken(SolidityParser.Mod, 0)

        def Mul(self):
            return self.getToken(SolidityParser.Mul, 0)

        def Sub(self):
            return self.getToken(SolidityParser.Sub, 0)

        def Equal(self):
            return self.getToken(SolidityParser.Equal, 0)

        def GreaterThan(self):
            return self.getToken(SolidityParser.GreaterThan, 0)

        def GreaterThanOrEqual(self):
            return self.getToken(SolidityParser.GreaterThanOrEqual, 0)

        def LessThan(self):
            return self.getToken(SolidityParser.LessThan, 0)

        def LessThanOrEqual(self):
            return self.getToken(SolidityParser.LessThanOrEqual, 0)

        def NotEqual(self):
            return self.getToken(SolidityParser.NotEqual, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinableOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinableOperator" ):
                listener.enterUserDefinableOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinableOperator" ):
                listener.exitUserDefinableOperator(self)




    def userDefinableOperator(self):

        localctx = SolidityParser.UserDefinableOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_userDefinableOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            _la = self._input.LA(1)
            if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 784327) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(SolidityParser.Using, 0)

        def For(self):
            return self.getToken(SolidityParser.For, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def Mul(self):
            return self.getToken(SolidityParser.Mul, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def Global(self):
            return self.getToken(SolidityParser.Global, 0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def usingAliases(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingAliasesContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingAliasesContext,i)


        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_usingDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDirective" ):
                listener.enterUsingDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDirective" ):
                listener.exitUsingDirective(self)




    def usingDirective(self):

        localctx = SolidityParser.UsingDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_usingDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(SolidityParser.Using)
            self.state = 636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 29, 31, 55, 60, 131]:
                self.state = 624
                self.identifierPath()
                pass
            elif token in [76]:
                self.state = 625
                self.match(SolidityParser.LBrace)
                self.state = 626
                self.usingAliases()
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==96:
                    self.state = 627
                    self.match(SolidityParser.Comma)
                    self.state = 628
                    self.usingAliases()
                    self.state = 633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 634
                self.match(SolidityParser.RBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 638
            self.match(SolidityParser.For)
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.state = 639
                self.match(SolidityParser.Mul)
                pass
            elif token in [3, 7, 9, 21, 26, 27, 29, 30, 31, 41, 55, 56, 58, 60, 64, 67, 131]:
                self.state = 640
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 643
                self.match(SolidityParser.Global)


            self.state = 646
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def As(self):
            return self.getToken(SolidityParser.As, 0)

        def userDefinableOperator(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinableOperatorContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingAliases" ):
                listener.enterUsingAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingAliases" ):
                listener.exitUsingAliases(self)




    def usingAliases(self):

        localctx = SolidityParser.UsingAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_usingAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.identifierPath()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 649
                self.match(SolidityParser.As)
                self.state = 650
                self.userDefinableOperator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def addressPayable(self):
            return self.getTypedRuleContext(SolidityParser.AddressPayableContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def mappingType(self):
            return self.getTypedRuleContext(SolidityParser.MappingTypeContext,0)


        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def LBrack(self):
            return self.getToken(SolidityParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(SolidityParser.RBrack, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 654
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 655
                self.addressPayable()
                pass

            elif la_ == 3:
                self.state = 656
                self.functionTypeName()
                pass

            elif la_ == 4:
                self.state = 657
                self.mappingType()
                pass

            elif la_ == 5:
                self.state = 658
                self.identifierPath()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 669
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 661
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 662
                    self.match(SolidityParser.LBrack)
                    self.state = 664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                        self.state = 663
                        self.expression(0)


                    self.state = 666
                    self.match(SolidityParser.RBrack) 
                self.state = 671
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Address(self):
            return self.getToken(SolidityParser.Address, 0)

        def Bool(self):
            return self.getToken(SolidityParser.Bool, 0)

        def String(self):
            return self.getToken(SolidityParser.String, 0)

        def Bytes(self):
            return self.getToken(SolidityParser.Bytes, 0)

        def SignedIntegerType(self):
            return self.getToken(SolidityParser.SignedIntegerType, 0)

        def UnsignedIntegerType(self):
            return self.getToken(SolidityParser.UnsignedIntegerType, 0)

        def FixedBytes(self):
            return self.getToken(SolidityParser.FixedBytes, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 360287970390966920) != 0) or _la==64 or _la==67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddressPayableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Address(self):
            return self.getToken(SolidityParser.Address, 0)

        def Payable(self):
            return self.getToken(SolidityParser.Payable, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_addressPayable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressPayable" ):
                listener.enterAddressPayable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressPayable" ):
                listener.exitAddressPayable(self)




    def addressPayable(self):

        localctx = SolidityParser.AddressPayableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_addressPayable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(SolidityParser.Address)
            self.state = 675
            self.match(SolidityParser.Payable)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arguments = None # ParameterListContext
            self.returnParameters = None # ParameterListContext

        def Function(self):
            return self.getToken(SolidityParser.Function, 0)

        def LParen(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.LParen)
            else:
                return self.getToken(SolidityParser.LParen, i)

        def RParen(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.RParen)
            else:
                return self.getToken(SolidityParser.RParen, i)

        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def Returns(self):
            return self.getToken(SolidityParser.Returns, 0)

        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_functionTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(SolidityParser.Function)
            self.state = 678
            self.match(SolidityParser.LParen)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                self.state = 679
                localctx.arguments = self.parameterList()


            self.state = 682
            self.match(SolidityParser.RParen)
            self.state = 687
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 685
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [23, 38, 49, 50]:
                        self.state = 683
                        self.visibility()
                        pass
                    elif token in [47, 51, 69]:
                        self.state = 684
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 690
                self.match(SolidityParser.Returns)
                self.state = 691
                self.match(SolidityParser.LParen)
                self.state = 692
                localctx.returnParameters = self.parameterList()
                self.state = 693
                self.match(SolidityParser.RParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # TypeNameContext
            self.location = None # DataLocationContext
            self.name = None # IdentifierContext

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def dataLocation(self):
            return self.getTypedRuleContext(SolidityParser.DataLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            localctx.type_ = self.typeName(0)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144119586122368000) != 0):
                self.state = 698
                localctx.location = self.dataLocation()


            self.state = 701
            localctx.name = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Memory(self):
            return self.getToken(SolidityParser.Memory, 0)

        def Storage(self):
            return self.getToken(SolidityParser.Storage, 0)

        def Calldata(self):
            return self.getToken(SolidityParser.Calldata, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_dataLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLocation" ):
                listener.enterDataLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLocation" ):
                listener.exitDataLocation(self)




    def dataLocation(self):

        localctx = SolidityParser.DataLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_dataLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144119586122368000) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryPrefixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def Inc(self):
            return self.getToken(SolidityParser.Inc, 0)
        def Dec(self):
            return self.getToken(SolidityParser.Dec, 0)
        def Not(self):
            return self.getToken(SolidityParser.Not, 0)
        def BitNot(self):
            return self.getToken(SolidityParser.BitNot, 0)
        def Delete(self):
            return self.getToken(SolidityParser.Delete, 0)
        def Sub(self):
            return self.getToken(SolidityParser.Sub, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPrefixOperation" ):
                listener.enterUnaryPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPrefixOperation" ):
                listener.exitUnaryPrefixOperation(self)


    class PrimaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)

        def literal(self):
            return self.getTypedRuleContext(SolidityParser.LiteralContext,0)

        def literalWithSubDenomination(self):
            return self.getTypedRuleContext(SolidityParser.LiteralWithSubDenominationContext,0)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)


    class OrderComparisonContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def LessThan(self):
            return self.getToken(SolidityParser.LessThan, 0)
        def GreaterThan(self):
            return self.getToken(SolidityParser.GreaterThan, 0)
        def LessThanOrEqual(self):
            return self.getToken(SolidityParser.LessThanOrEqual, 0)
        def GreaterThanOrEqual(self):
            return self.getToken(SolidityParser.GreaterThanOrEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderComparison" ):
                listener.enterOrderComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderComparison" ):
                listener.exitOrderComparison(self)


    class ConditionalContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def Conditional(self):
            return self.getToken(SolidityParser.Conditional, 0)
        def Colon(self):
            return self.getToken(SolidityParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional" ):
                listener.enterConditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional" ):
                listener.exitConditional(self)


    class PayableConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Payable(self):
            return self.getToken(SolidityParser.Payable, 0)
        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPayableConversion" ):
                listener.enterPayableConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPayableConversion" ):
                listener.exitPayableConversion(self)


    class AssignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def assignOp(self):
            return self.getTypedRuleContext(SolidityParser.AssignOpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)


    class UnarySuffixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def Inc(self):
            return self.getToken(SolidityParser.Inc, 0)
        def Dec(self):
            return self.getToken(SolidityParser.Dec, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnarySuffixOperation" ):
                listener.enterUnarySuffixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnarySuffixOperation" ):
                listener.exitUnarySuffixOperation(self)


    class ShiftOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def Shl(self):
            return self.getToken(SolidityParser.Shl, 0)
        def Sar(self):
            return self.getToken(SolidityParser.Sar, 0)
        def Shr(self):
            return self.getToken(SolidityParser.Shr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOperation" ):
                listener.enterShiftOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOperation" ):
                listener.exitShiftOperation(self)


    class BitAndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def BitAnd(self):
            return self.getToken(SolidityParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndOperation" ):
                listener.enterBitAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndOperation" ):
                listener.exitBitAndOperation(self)


    class FunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class IndexRangeAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.startIndex = None # ExpressionContext
            self.endIndex = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def LBrack(self):
            return self.getToken(SolidityParser.LBrack, 0)
        def Colon(self):
            return self.getToken(SolidityParser.Colon, 0)
        def RBrack(self):
            return self.getToken(SolidityParser.RBrack, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRangeAccess" ):
                listener.enterIndexRangeAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRangeAccess" ):
                listener.exitIndexRangeAccess(self)


    class IndexAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.index = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def LBrack(self):
            return self.getToken(SolidityParser.LBrack, 0)
        def RBrack(self):
            return self.getToken(SolidityParser.RBrack, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexAccess" ):
                listener.enterIndexAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexAccess" ):
                listener.exitIndexAccess(self)


    class AddSubOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def Add(self):
            return self.getToken(SolidityParser.Add, 0)
        def Sub(self):
            return self.getToken(SolidityParser.Sub, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSubOperation" ):
                listener.enterAddSubOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSubOperation" ):
                listener.exitAddSubOperation(self)


    class BitOrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def BitOr(self):
            return self.getToken(SolidityParser.BitOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrOperation" ):
                listener.enterBitOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrOperation" ):
                listener.exitBitOrOperation(self)


    class ExpOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def Exp(self):
            return self.getToken(SolidityParser.Exp, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpOperation" ):
                listener.enterExpOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpOperation" ):
                listener.exitExpOperation(self)


    class AndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def And(self):
            return self.getToken(SolidityParser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOperation" ):
                listener.enterAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOperation" ):
                listener.exitAndOperation(self)


    class InlineArrayContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineArrayExpression(self):
            return self.getTypedRuleContext(SolidityParser.InlineArrayExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineArray" ):
                listener.enterInlineArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineArray" ):
                listener.exitInlineArray(self)


    class OrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def Or(self):
            return self.getToken(SolidityParser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrOperation" ):
                listener.enterOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrOperation" ):
                listener.exitOrOperation(self)


    class MemberAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def Period(self):
            return self.getToken(SolidityParser.Period, 0)
        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)

        def Address(self):
            return self.getToken(SolidityParser.Address, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)


    class MulDivModOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def Mul(self):
            return self.getToken(SolidityParser.Mul, 0)
        def Div(self):
            return self.getToken(SolidityParser.Div, 0)
        def Mod(self):
            return self.getToken(SolidityParser.Mod, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulDivModOperation" ):
                listener.enterMulDivModOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulDivModOperation" ):
                listener.exitMulDivModOperation(self)


    class FunctionCallOptionsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)
        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)
        def namedArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NamedArgumentContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOptions" ):
                listener.enterFunctionCallOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOptions" ):
                listener.exitFunctionCallOptions(self)


    class NewExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(SolidityParser.New, 0)
        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpr" ):
                listener.enterNewExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpr" ):
                listener.exitNewExpr(self)


    class BitXorOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def BitXor(self):
            return self.getToken(SolidityParser.BitXor, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXorOperation" ):
                listener.enterBitXorOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXorOperation" ):
                listener.exitBitXorOperation(self)


    class TupleContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)


    class EqualityComparisonContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def Equal(self):
            return self.getToken(SolidityParser.Equal, 0)
        def NotEqual(self):
            return self.getToken(SolidityParser.NotEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)


    class MetaTypeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Type(self):
            return self.getToken(SolidityParser.Type, 0)
        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)
        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetaType" ):
                listener.enterMetaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetaType" ):
                listener.exitMetaType(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                localctx = SolidityParser.PayableConversionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 706
                self.match(SolidityParser.Payable)
                self.state = 707
                self.callArgumentList()
                pass
            elif token in [63]:
                localctx = SolidityParser.MetaTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 708
                self.match(SolidityParser.Type)
                self.state = 709
                self.match(SolidityParser.LParen)
                self.state = 710
                self.typeName(0)
                self.state = 711
                self.match(SolidityParser.RParen)
                pass
            elif token in [16, 106, 117, 118, 119, 120]:
                localctx = SolidityParser.UnaryPrefixOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 713
                _la = self._input.LA(1)
                if not(_la==16 or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 30721) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 714
                self.expression(19)
                pass
            elif token in [44]:
                localctx = SolidityParser.NewExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 715
                self.match(SolidityParser.New)
                self.state = 716
                self.typeName(0)
                pass
            elif token in [72]:
                localctx = SolidityParser.TupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 717
                self.tupleExpression()
                pass
            elif token in [74]:
                localctx = SolidityParser.InlineArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 718
                self.inlineArrayExpression()
                pass
            elif token in [3, 7, 9, 21, 25, 26, 27, 29, 31, 55, 56, 58, 60, 61, 64, 67, 123, 124, 125, 126, 127, 129, 131]:
                localctx = SolidityParser.PrimaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 719
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 720
                    self.literal()
                    pass

                elif la_ == 3:
                    self.state = 721
                    self.literalWithSubDenomination()
                    pass

                elif la_ == 4:
                    self.state = 722
                    self.elementaryTypeName()
                    pass


                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 809
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 727
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 728
                        self.match(SolidityParser.Exp)
                        self.state = 729
                        self.expression(17)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.MulDivModOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 730
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 731
                        _la = self._input.LA(1)
                        if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 7) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 732
                        self.expression(17)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.AddSubOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 733
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 734
                        _la = self._input.LA(1)
                        if not(_la==105 or _la==106):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 735
                        self.expression(16)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ShiftOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 736
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 737
                        _la = self._input.LA(1)
                        if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 7) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 738
                        self.expression(15)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.BitAndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 739
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 740
                        self.match(SolidityParser.BitAnd)
                        self.state = 741
                        self.expression(14)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.BitXorOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 742
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 743
                        self.match(SolidityParser.BitXor)
                        self.state = 744
                        self.expression(13)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.BitOrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 745
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 746
                        self.match(SolidityParser.BitOr)
                        self.state = 747
                        self.expression(12)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.OrderComparisonContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 748
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 749
                        _la = self._input.LA(1)
                        if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 15) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 750
                        self.expression(11)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.EqualityComparisonContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 751
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 752
                        _la = self._input.LA(1)
                        if not(_la==111 or _la==112):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 753
                        self.expression(10)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.AndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 754
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 755
                        self.match(SolidityParser.And)
                        self.state = 756
                        self.expression(9)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.OrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 757
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 758
                        self.match(SolidityParser.Or)
                        self.state = 759
                        self.expression(8)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ConditionalContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 760
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 761
                        self.match(SolidityParser.Conditional)
                        self.state = 762
                        self.expression(0)
                        self.state = 763
                        self.match(SolidityParser.Colon)
                        self.state = 764
                        self.expression(6)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.AssignmentContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 766
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 767
                        self.assignOp()
                        self.state = 768
                        self.expression(5)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.IndexAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 770
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 771
                        self.match(SolidityParser.LBrack)
                        self.state = 773
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                            self.state = 772
                            localctx.index = self.expression(0)


                        self.state = 775
                        self.match(SolidityParser.RBrack)
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.IndexRangeAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 776
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 777
                        self.match(SolidityParser.LBrack)
                        self.state = 779
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                            self.state = 778
                            localctx.startIndex = self.expression(0)


                        self.state = 781
                        self.match(SolidityParser.Colon)
                        self.state = 783
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                            self.state = 782
                            localctx.endIndex = self.expression(0)


                        self.state = 785
                        self.match(SolidityParser.RBrack)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.MemberAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 786
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 787
                        self.match(SolidityParser.Period)
                        self.state = 790
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [21, 29, 31, 55, 60, 131]:
                            self.state = 788
                            self.identifier()
                            pass
                        elif token in [3]:
                            self.state = 789
                            self.match(SolidityParser.Address)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.FunctionCallOptionsContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 792
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 793
                        self.match(SolidityParser.LBrace)
                        self.state = 802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                            self.state = 794
                            self.namedArgument()
                            self.state = 799
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==96:
                                self.state = 795
                                self.match(SolidityParser.Comma)
                                self.state = 796
                                self.namedArgument()
                                self.state = 801
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 804
                        self.match(SolidityParser.RBrace)
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.FunctionCallContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 805
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 806
                        self.callArgumentList()
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.UnarySuffixOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 807
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 808
                        _la = self._input.LA(1)
                        if not(_la==119 or _la==120):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AssignOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(SolidityParser.Assign, 0)

        def AssignBitOr(self):
            return self.getToken(SolidityParser.AssignBitOr, 0)

        def AssignBitXor(self):
            return self.getToken(SolidityParser.AssignBitXor, 0)

        def AssignBitAnd(self):
            return self.getToken(SolidityParser.AssignBitAnd, 0)

        def AssignShl(self):
            return self.getToken(SolidityParser.AssignShl, 0)

        def AssignSar(self):
            return self.getToken(SolidityParser.AssignSar, 0)

        def AssignShr(self):
            return self.getToken(SolidityParser.AssignShr, 0)

        def AssignAdd(self):
            return self.getToken(SolidityParser.AssignAdd, 0)

        def AssignSub(self):
            return self.getToken(SolidityParser.AssignSub, 0)

        def AssignMul(self):
            return self.getToken(SolidityParser.AssignMul, 0)

        def AssignDiv(self):
            return self.getToken(SolidityParser.AssignDiv, 0)

        def AssignMod(self):
            return self.getToken(SolidityParser.AssignMod, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assignOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignOp" ):
                listener.enterAssignOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignOp" ):
                listener.exitAssignOp(self)




    def assignOp(self):

        localctx = SolidityParser.AssignOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_assignOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 4095) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(SolidityParser.LParen)

            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                self.state = 817
                self.expression(0)


            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 820
                self.match(SolidityParser.Comma)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                    self.state = 821
                    self.expression(0)


                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self.match(SolidityParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineArrayExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(SolidityParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(SolidityParser.RBrack, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineArrayExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineArrayExpression" ):
                listener.enterInlineArrayExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineArrayExpression" ):
                listener.exitInlineArrayExpression(self)




    def inlineArrayExpression(self):

        localctx = SolidityParser.InlineArrayExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_inlineArrayExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(SolidityParser.LBrack)

            self.state = 832
            self.expression(0)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 833
                self.match(SolidityParser.Comma)
                self.state = 834
                self.expression(0)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self.match(SolidityParser.RBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def From(self):
            return self.getToken(SolidityParser.From, 0)

        def Error(self):
            return self.getToken(SolidityParser.Error, 0)

        def Revert(self):
            return self.getToken(SolidityParser.Revert, 0)

        def Global(self):
            return self.getToken(SolidityParser.Global, 0)

        def Transient(self):
            return self.getToken(SolidityParser.Transient, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def boolLiteral(self):
            return self.getTypedRuleContext(SolidityParser.BoolLiteralContext,0)


        def hexStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexStringLiteralContext,0)


        def unicodeStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.UnicodeStringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = SolidityParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_literal)
        try:
            self.state = 849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.stringLiteral()
                pass
            elif token in [127, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.numberLiteral()
                pass
            elif token in [25, 61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 846
                self.boolLiteral()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 4)
                self.state = 847
                self.hexStringLiteral()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 5)
                self.state = 848
                self.unicodeStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralWithSubDenominationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def SubDenomination(self):
            return self.getToken(SolidityParser.SubDenomination, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_literalWithSubDenomination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralWithSubDenomination" ):
                listener.enterLiteralWithSubDenomination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralWithSubDenomination" ):
                listener.exitLiteralWithSubDenomination(self)




    def literalWithSubDenomination(self):

        localctx = SolidityParser.LiteralWithSubDenominationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_literalWithSubDenomination)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.numberLiteral()
            self.state = 852
            self.match(SolidityParser.SubDenomination)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TrueLiteral(self):
            return self.getToken(SolidityParser.TrueLiteral, 0)

        def FalseLiteral(self):
            return self.getToken(SolidityParser.FalseLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_boolLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolLiteral" ):
                listener.enterBoolLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolLiteral" ):
                listener.exitBoolLiteral(self)




    def boolLiteral(self):

        localctx = SolidityParser.BoolLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_boolLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not(_la==25 or _la==61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NonEmptyStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NonEmptyStringLiteral)
            else:
                return self.getToken(SolidityParser.NonEmptyStringLiteral, i)

        def EmptyStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.EmptyStringLiteral)
            else:
                return self.getToken(SolidityParser.EmptyStringLiteral, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 856
                    _la = self._input.LA(1)
                    if not(_la==123 or _la==124):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 859 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexString(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexString)
            else:
                return self.getToken(SolidityParser.HexString, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexStringLiteral" ):
                listener.enterHexStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexStringLiteral" ):
                listener.exitHexStringLiteral(self)




    def hexStringLiteral(self):

        localctx = SolidityParser.HexStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_hexStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 861
                    self.match(SolidityParser.HexString)

                else:
                    raise NoViableAltException(self)
                self.state = 864 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnicodeStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnicodeStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.UnicodeStringLiteral)
            else:
                return self.getToken(SolidityParser.UnicodeStringLiteral, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_unicodeStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)




    def unicodeStringLiteral(self):

        localctx = SolidityParser.UnicodeStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_unicodeStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 866
                    self.match(SolidityParser.UnicodeStringLiteral)

                else:
                    raise NoViableAltException(self)
                self.state = 869 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            _la = self._input.LA(1)
            if not(_la==127 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrace(self):
            return self.getToken(SolidityParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(SolidityParser.RBrace, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def uncheckedBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UncheckedBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UncheckedBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(SolidityParser.LBrace)
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -747436996591664184) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435791989) != 0) or _la==129 or _la==131:
                self.state = 876
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 6, 7, 8, 9, 14, 16, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 33, 41, 44, 47, 53, 55, 56, 58, 60, 61, 62, 63, 64, 67, 71, 72, 74, 76, 106, 117, 118, 119, 120, 123, 124, 125, 126, 127, 129, 131]:
                    self.state = 874
                    self.statement()
                    pass
                elif token in [65]:
                    self.state = 875
                    self.uncheckedBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 881
            self.match(SolidityParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Unchecked(self):
            return self.getToken(SolidityParser.Unchecked, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedBlock" ):
                listener.enterUncheckedBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedBlock" ):
                listener.exitUncheckedBlock(self)




    def uncheckedBlock(self):

        localctx = SolidityParser.UncheckedBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_uncheckedBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(SolidityParser.Unchecked)
            self.state = 884
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def assemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_statement)
        try:
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.simpleStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 888
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 889
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 890
                self.whileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 891
                self.doWhileStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 892
                self.continueStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 893
                self.breakStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 894
                self.tryStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 895
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 896
                self.emitStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 897
                self.revertStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 898
                self.assemblyStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_simpleStatement)
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 901
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(SolidityParser.If, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def Else(self):
            return self.getToken(SolidityParser.Else, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(SolidityParser.If)
            self.state = 906
            self.match(SolidityParser.LParen)
            self.state = 907
            self.expression(0)
            self.state = 908
            self.match(SolidityParser.RParen)
            self.state = 909
            self.statement()
            self.state = 912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 910
                self.match(SolidityParser.Else)
                self.state = 911
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(SolidityParser.For, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Semicolon)
            else:
                return self.getToken(SolidityParser.Semicolon, i)

        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(SolidityParser.For)
            self.state = 915
            self.match(SolidityParser.LParen)
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 7, 9, 16, 21, 25, 26, 27, 29, 30, 31, 41, 44, 47, 55, 56, 58, 60, 61, 63, 64, 67, 72, 74, 106, 117, 118, 119, 120, 123, 124, 125, 126, 127, 129, 131]:
                self.state = 916
                self.simpleStatement()
                pass
            elif token in [79]:
                self.state = 917
                self.match(SolidityParser.Semicolon)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 7, 9, 16, 21, 25, 26, 27, 29, 31, 44, 47, 55, 56, 58, 60, 61, 63, 64, 67, 72, 74, 106, 117, 118, 119, 120, 123, 124, 125, 126, 127, 129, 131]:
                self.state = 920
                self.expressionStatement()
                pass
            elif token in [79]:
                self.state = 921
                self.match(SolidityParser.Semicolon)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                self.state = 924
                self.expression(0)


            self.state = 927
            self.match(SolidityParser.RParen)
            self.state = 928
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(SolidityParser.While, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(SolidityParser.While)
            self.state = 931
            self.match(SolidityParser.LParen)
            self.state = 932
            self.expression(0)
            self.state = 933
            self.match(SolidityParser.RParen)
            self.state = 934
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Do(self):
            return self.getToken(SolidityParser.Do, 0)

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def While(self):
            return self.getToken(SolidityParser.While, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(SolidityParser.Do)
            self.state = 937
            self.statement()
            self.state = 938
            self.match(SolidityParser.While)
            self.state = 939
            self.match(SolidityParser.LParen)
            self.state = 940
            self.expression(0)
            self.state = 941
            self.match(SolidityParser.RParen)
            self.state = 942
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(SolidityParser.Continue, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(SolidityParser.Continue)
            self.state = 945
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(SolidityParser.Break, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(SolidityParser.Break)
            self.state = 948
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returnParameters = None # ParameterListContext

        def Try(self):
            return self.getToken(SolidityParser.Try, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def Returns(self):
            return self.getToken(SolidityParser.Returns, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(SolidityParser.Try)
            self.state = 951
            self.expression(0)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 952
                self.match(SolidityParser.Returns)
                self.state = 953
                self.match(SolidityParser.LParen)
                self.state = 954
                localctx.returnParameters = self.parameterList()
                self.state = 955
                self.match(SolidityParser.RParen)


            self.state = 959
            self.block()
            self.state = 961 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 960
                self.catchClause()
                self.state = 963 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==11):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arguments = None # ParameterListContext

        def Catch(self):
            return self.getToken(SolidityParser.Catch, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(SolidityParser.Catch)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==72 or _la==131:
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                    self.state = 966
                    self.identifier()


                self.state = 969
                self.match(SolidityParser.LParen)

                self.state = 970
                localctx.arguments = self.parameterList()
                self.state = 971
                self.match(SolidityParser.RParen)


            self.state = 975
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(SolidityParser.Return, 0)

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(SolidityParser.Return)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -5368132423229832568) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -441348365435796215) != 0) or _la==129 or _la==131:
                self.state = 978
                self.expression(0)


            self.state = 981
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Emit(self):
            return self.getToken(SolidityParser.Emit, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(SolidityParser.Emit)
            self.state = 984
            self.expression(0)
            self.state = 985
            self.callArgumentList()
            self.state = 986
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Revert(self):
            return self.getToken(SolidityParser.Revert, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_revertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(SolidityParser.Revert)
            self.state = 989
            self.expression(0)
            self.state = 990
            self.callArgumentList()
            self.state = 991
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assembly(self):
            return self.getToken(SolidityParser.Assembly, 0)

        def AssemblyLBrace(self):
            return self.getToken(SolidityParser.AssemblyLBrace, 0)

        def YulRBrace(self):
            return self.getToken(SolidityParser.YulRBrace, 0)

        def AssemblyDialect(self):
            return self.getToken(SolidityParser.AssemblyDialect, 0)

        def assemblyFlags(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFlagsContext,0)


        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStatement" ):
                listener.enterAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStatement" ):
                listener.exitAssemblyStatement(self)




    def assemblyStatement(self):

        localctx = SolidityParser.AssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(SolidityParser.Assembly)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 994
                self.match(SolidityParser.AssemblyDialect)


            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 997
                self.assemblyFlags()


            self.state = 1000
            self.match(SolidityParser.AssemblyLBrace)
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 4220901) != 0):
                self.state = 1001
                self.yulStatement()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1007
            self.match(SolidityParser.YulRBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFlagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AssemblyBlockLParen(self):
            return self.getToken(SolidityParser.AssemblyBlockLParen, 0)

        def AssemblyFlagString(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.AssemblyFlagString)
            else:
                return self.getToken(SolidityParser.AssemblyFlagString, i)

        def AssemblyBlockRParen(self):
            return self.getToken(SolidityParser.AssemblyBlockRParen, 0)

        def AssemblyBlockComma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.AssemblyBlockComma)
            else:
                return self.getToken(SolidityParser.AssemblyBlockComma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFlags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFlags" ):
                listener.enterAssemblyFlags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFlags" ):
                listener.exitAssemblyFlags(self)




    def assemblyFlags(self):

        localctx = SolidityParser.AssemblyFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(SolidityParser.AssemblyBlockLParen)
            self.state = 1010
            self.match(SolidityParser.AssemblyFlagString)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==140:
                self.state = 1011
                self.match(SolidityParser.AssemblyBlockComma)
                self.state = 1012
                self.match(SolidityParser.AssemblyFlagString)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1018
            self.match(SolidityParser.AssemblyBlockRParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._variableDeclaration = None # VariableDeclarationContext
            self.variableDeclarations = list() # of VariableDeclarationContexts

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            localctx._variableDeclaration = self.variableDeclaration()
            localctx.variableDeclarations.append(localctx._variableDeclaration)
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 1021
                self.match(SolidityParser.Comma)
                self.state = 1022
                localctx._variableDeclaration = self.variableDeclaration()
                localctx.variableDeclarations.append(localctx._variableDeclaration)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._variableDeclaration = None # VariableDeclarationContext
            self.variableDeclarations = list() # of VariableDeclarationContexts

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.Comma)
            else:
                return self.getToken(SolidityParser.Comma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationTuple" ):
                listener.enterVariableDeclarationTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationTuple" ):
                listener.exitVariableDeclarationTuple(self)




    def variableDeclarationTuple(self):

        localctx = SolidityParser.VariableDeclarationTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_variableDeclarationTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(SolidityParser.LParen)

            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 1029
                self.match(SolidityParser.Comma)
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1035
            localctx._variableDeclaration = self.variableDeclaration()
            localctx.variableDeclarations.append(localctx._variableDeclaration)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 1037
                self.match(SolidityParser.Comma)
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1549240474800226952) != 0) or _la==64 or _la==67 or _la==131:
                    self.state = 1038
                    localctx._variableDeclaration = self.variableDeclaration()
                    localctx.variableDeclarations.append(localctx._variableDeclaration)


                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1046
            self.match(SolidityParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationTuple(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationTupleContext,0)


        def Assign(self):
            return self.getToken(SolidityParser.Assign, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 7, 9, 21, 26, 27, 29, 30, 31, 41, 55, 56, 58, 60, 64, 67, 131]:
                self.state = 1048
                self.variableDeclaration()
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1049
                    self.match(SolidityParser.Assign)
                    self.state = 1050
                    self.expression(0)


                pass
            elif token in [72]:
                self.state = 1053
                self.variableDeclarationTuple()
                self.state = 1054
                self.match(SolidityParser.Assign)
                self.state = 1055
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1059
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def Semicolon(self):
            return self.getToken(SolidityParser.Semicolon, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.expression(0)
            self.state = 1062
            self.match(SolidityParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MappingKeyTypeContext
            self.name = None # IdentifierContext
            self.value = None # TypeNameContext

        def Mapping(self):
            return self.getToken(SolidityParser.Mapping, 0)

        def LParen(self):
            return self.getToken(SolidityParser.LParen, 0)

        def DoubleArrow(self):
            return self.getToken(SolidityParser.DoubleArrow, 0)

        def RParen(self):
            return self.getToken(SolidityParser.RParen, 0)

        def mappingKeyType(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyTypeContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingType" ):
                listener.enterMappingType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingType" ):
                listener.exitMappingType(self)




    def mappingType(self):

        localctx = SolidityParser.MappingTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_mappingType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(SolidityParser.Mapping)
            self.state = 1065
            self.match(SolidityParser.LParen)
            self.state = 1066
            localctx.key = self.mappingKeyType()
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                self.state = 1067
                localctx.name = self.identifier()


            self.state = 1070
            self.match(SolidityParser.DoubleArrow)
            self.state = 1071
            localctx.value = self.typeName(0)
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1188950304312262656) != 0) or _la==131:
                self.state = 1072
                localctx.name = self.identifier()


            self.state = 1075
            self.match(SolidityParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKeyType" ):
                listener.enterMappingKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKeyType" ):
                listener.exitMappingKeyType(self)




    def mappingKeyType(self):

        localctx = SolidityParser.MappingKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_mappingKeyType)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 7, 9, 26, 27, 56, 58, 64, 67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.elementaryTypeName()
                pass
            elif token in [21, 29, 31, 55, 60, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.identifierPath()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def yulVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.YulVariableDeclarationContext,0)


        def yulAssignment(self):
            return self.getTypedRuleContext(SolidityParser.YulAssignmentContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulIfStatementContext,0)


        def yulForStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulForStatementContext,0)


        def yulSwitchStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulSwitchStatementContext,0)


        def YulLeave(self):
            return self.getToken(SolidityParser.YulLeave, 0)

        def YulBreak(self):
            return self.getToken(SolidityParser.YulBreak, 0)

        def YulContinue(self):
            return self.getToken(SolidityParser.YulContinue, 0)

        def yulFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulStatement" ):
                listener.enterYulStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulStatement" ):
                listener.exitYulStatement(self)




    def yulStatement(self):

        localctx = SolidityParser.YulStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_yulStatement)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.yulBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.yulVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.yulAssignment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1084
                self.yulFunctionCall()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1085
                self.yulIfStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1086
                self.yulForStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1087
                self.yulSwitchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1088
                self.match(SolidityParser.YulLeave)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1089
                self.match(SolidityParser.YulBreak)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1090
                self.match(SolidityParser.YulContinue)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1091
                self.yulFunctionDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulLBrace(self):
            return self.getToken(SolidityParser.YulLBrace, 0)

        def YulRBrace(self):
            return self.getToken(SolidityParser.YulRBrace, 0)

        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulBlock" ):
                listener.enterYulBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulBlock" ):
                listener.exitYulBlock(self)




    def yulBlock(self):

        localctx = SolidityParser.YulBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_yulBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(SolidityParser.YulLBrace)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 4220901) != 0):
                self.state = 1095
                self.yulStatement()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1101
            self.match(SolidityParser.YulRBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._YulIdentifier = None # Token
            self.variables = list() # of Tokens

        def YulLet(self):
            return self.getToken(SolidityParser.YulLet, 0)

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def YulAssign(self):
            return self.getToken(SolidityParser.YulAssign, 0)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def YulComma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulComma)
            else:
                return self.getToken(SolidityParser.YulComma, i)

        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulVariableDeclaration" ):
                listener.enterYulVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulVariableDeclaration" ):
                listener.exitYulVariableDeclaration(self)




    def yulVariableDeclaration(self):

        localctx = SolidityParser.YulVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_yulVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.match(SolidityParser.YulLet)
                self.state = 1104
                localctx._YulIdentifier = self.match(SolidityParser.YulIdentifier)
                localctx.variables.append(localctx._YulIdentifier)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 1105
                    self.match(SolidityParser.YulAssign)
                    self.state = 1106
                    self.yulExpression()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.match(SolidityParser.YulLet)
                self.state = 1110
                localctx._YulIdentifier = self.match(SolidityParser.YulIdentifier)
                localctx.variables.append(localctx._YulIdentifier)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==164:
                    self.state = 1111
                    self.match(SolidityParser.YulComma)
                    self.state = 1112
                    localctx._YulIdentifier = self.match(SolidityParser.YulIdentifier)
                    localctx.variables.append(localctx._YulIdentifier)
                    self.state = 1117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 1118
                    self.match(SolidityParser.YulAssign)
                    self.state = 1119
                    self.yulFunctionCall()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulPathContext,i)


        def YulAssign(self):
            return self.getToken(SolidityParser.YulAssign, 0)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def YulComma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulComma)
            else:
                return self.getToken(SolidityParser.YulComma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulAssignment" ):
                listener.enterYulAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulAssignment" ):
                listener.exitYulAssignment(self)




    def yulAssignment(self):

        localctx = SolidityParser.YulAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_yulAssignment)
        self._la = 0 # Token type
        try:
            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1124
                self.yulPath()
                self.state = 1125
                self.match(SolidityParser.YulAssign)
                self.state = 1126
                self.yulExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1128
                self.yulPath()
                self.state = 1131 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1129
                    self.match(SolidityParser.YulComma)
                    self.state = 1130
                    self.yulPath()
                    self.state = 1133 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==164):
                        break

                self.state = 1135
                self.match(SolidityParser.YulAssign)
                self.state = 1136
                self.yulFunctionCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cond = None # YulExpressionContext
            self.body = None # YulBlockContext

        def YulIf(self):
            return self.getToken(SolidityParser.YulIf, 0)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulIfStatement" ):
                listener.enterYulIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulIfStatement" ):
                listener.exitYulIfStatement(self)




    def yulIfStatement(self):

        localctx = SolidityParser.YulIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_yulIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(SolidityParser.YulIf)
            self.state = 1141
            localctx.cond = self.yulExpression()
            self.state = 1142
            localctx.body = self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.init = None # YulBlockContext
            self.cond = None # YulExpressionContext
            self.post = None # YulBlockContext
            self.body = None # YulBlockContext

        def YulFor(self):
            return self.getToken(SolidityParser.YulFor, 0)

        def yulBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulBlockContext,i)


        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulForStatement" ):
                listener.enterYulForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulForStatement" ):
                listener.exitYulForStatement(self)




    def yulForStatement(self):

        localctx = SolidityParser.YulForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_yulForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(SolidityParser.YulFor)
            self.state = 1145
            localctx.init = self.yulBlock()
            self.state = 1146
            localctx.cond = self.yulExpression()
            self.state = 1147
            localctx.post = self.yulBlock()
            self.state = 1148
            localctx.body = self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulSwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulCase(self):
            return self.getToken(SolidityParser.YulCase, 0)

        def yulLiteral(self):
            return self.getTypedRuleContext(SolidityParser.YulLiteralContext,0)


        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulSwitchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulSwitchCase" ):
                listener.enterYulSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulSwitchCase" ):
                listener.exitYulSwitchCase(self)




    def yulSwitchCase(self):

        localctx = SolidityParser.YulSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_yulSwitchCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(SolidityParser.YulCase)
            self.state = 1151
            self.yulLiteral()
            self.state = 1152
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulSwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulSwitch(self):
            return self.getToken(SolidityParser.YulSwitch, 0)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def YulDefault(self):
            return self.getToken(SolidityParser.YulDefault, 0)

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def yulSwitchCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulSwitchCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulSwitchCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulSwitchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulSwitchStatement" ):
                listener.enterYulSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulSwitchStatement" ):
                listener.exitYulSwitchStatement(self)




    def yulSwitchStatement(self):

        localctx = SolidityParser.YulSwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_yulSwitchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(SolidityParser.YulSwitch)
            self.state = 1155
            self.yulExpression()
            self.state = 1167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.state = 1157 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1156
                    self.yulSwitchCase()
                    self.state = 1159 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==145):
                        break

                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 1161
                    self.match(SolidityParser.YulDefault)
                    self.state = 1162
                    self.yulBlock()


                pass
            elif token in [147]:
                self.state = 1165
                self.match(SolidityParser.YulDefault)
                self.state = 1166
                self.yulBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._YulIdentifier = None # Token
            self.arguments = list() # of Tokens
            self.returnParameters = list() # of Tokens
            self.body = None # YulBlockContext

        def YulFunction(self):
            return self.getToken(SolidityParser.YulFunction, 0)

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def YulLParen(self):
            return self.getToken(SolidityParser.YulLParen, 0)

        def YulRParen(self):
            return self.getToken(SolidityParser.YulRParen, 0)

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def YulArrow(self):
            return self.getToken(SolidityParser.YulArrow, 0)

        def YulComma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulComma)
            else:
                return self.getToken(SolidityParser.YulComma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionDefinition" ):
                listener.enterYulFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionDefinition" ):
                listener.exitYulFunctionDefinition(self)




    def yulFunctionDefinition(self):

        localctx = SolidityParser.YulFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_yulFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(SolidityParser.YulFunction)
            self.state = 1170
            self.match(SolidityParser.YulIdentifier)
            self.state = 1171
            self.match(SolidityParser.YulLParen)
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==166:
                self.state = 1172
                localctx._YulIdentifier = self.match(SolidityParser.YulIdentifier)
                localctx.arguments.append(localctx._YulIdentifier)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==164:
                    self.state = 1173
                    self.match(SolidityParser.YulComma)
                    self.state = 1174
                    localctx._YulIdentifier = self.match(SolidityParser.YulIdentifier)
                    localctx.arguments.append(localctx._YulIdentifier)
                    self.state = 1179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1182
            self.match(SolidityParser.YulRParen)
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==165:
                self.state = 1183
                self.match(SolidityParser.YulArrow)
                self.state = 1184
                localctx._YulIdentifier = self.match(SolidityParser.YulIdentifier)
                localctx.returnParameters.append(localctx._YulIdentifier)
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==164:
                    self.state = 1185
                    self.match(SolidityParser.YulComma)
                    self.state = 1186
                    localctx._YulIdentifier = self.match(SolidityParser.YulIdentifier)
                    localctx.returnParameters.append(localctx._YulIdentifier)
                    self.state = 1191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1194
            localctx.body = self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def YulPeriod(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulPeriod)
            else:
                return self.getToken(SolidityParser.YulPeriod, i)

        def YulEVMBuiltin(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulEVMBuiltin)
            else:
                return self.getToken(SolidityParser.YulEVMBuiltin, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulPath" ):
                listener.enterYulPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulPath" ):
                listener.exitYulPath(self)




    def yulPath(self):

        localctx = SolidityParser.YulPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_yulPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(SolidityParser.YulIdentifier)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==163:
                self.state = 1197
                self.match(SolidityParser.YulPeriod)
                self.state = 1198
                _la = self._input.LA(1)
                if not(_la==157 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulLParen(self):
            return self.getToken(SolidityParser.YulLParen, 0)

        def YulRParen(self):
            return self.getToken(SolidityParser.YulRParen, 0)

        def YulIdentifier(self):
            return self.getToken(SolidityParser.YulIdentifier, 0)

        def YulEVMBuiltin(self):
            return self.getToken(SolidityParser.YulEVMBuiltin, 0)

        def yulExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulExpressionContext,i)


        def YulComma(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulComma)
            else:
                return self.getToken(SolidityParser.YulComma, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionCall" ):
                listener.enterYulFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionCall" ):
                listener.exitYulFunctionCall(self)




    def yulFunctionCall(self):

        localctx = SolidityParser.YulFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_yulFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            _la = self._input.LA(1)
            if not(_la==157 or _la==166):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1205
            self.match(SolidityParser.YulLParen)
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 8127105) != 0):
                self.state = 1206
                self.yulExpression()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==164:
                    self.state = 1207
                    self.match(SolidityParser.YulComma)
                    self.state = 1208
                    self.yulExpression()
                    self.state = 1213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1216
            self.match(SolidityParser.YulRParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulboolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulTrue(self):
            return self.getToken(SolidityParser.YulTrue, 0)

        def YulFalse(self):
            return self.getToken(SolidityParser.YulFalse, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulbool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulbool" ):
                listener.enterYulbool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulbool" ):
                listener.exitYulbool(self)




    def yulbool(self):

        localctx = SolidityParser.YulboolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_yulbool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            _la = self._input.LA(1)
            if not(_la==148 or _la==155):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulDecimalNumber(self):
            return self.getToken(SolidityParser.YulDecimalNumber, 0)

        def YulStringLiteral(self):
            return self.getToken(SolidityParser.YulStringLiteral, 0)

        def YulHexNumber(self):
            return self.getToken(SolidityParser.YulHexNumber, 0)

        def yulbool(self):
            return self.getTypedRuleContext(SolidityParser.YulboolContext,0)


        def YulHexStringLiteral(self):
            return self.getToken(SolidityParser.YulHexStringLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulLiteral" ):
                listener.enterYulLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulLiteral" ):
                listener.exitYulLiteral(self)




    def yulLiteral(self):

        localctx = SolidityParser.YulLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_yulLiteral)
        try:
            self.state = 1225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [168]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1220
                self.match(SolidityParser.YulDecimalNumber)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1221
                self.match(SolidityParser.YulStringLiteral)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1222
                self.match(SolidityParser.YulHexNumber)
                pass
            elif token in [148, 155]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1223
                self.yulbool()
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1224
                self.match(SolidityParser.YulHexStringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulPath(self):
            return self.getTypedRuleContext(SolidityParser.YulPathContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulLiteral(self):
            return self.getTypedRuleContext(SolidityParser.YulLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulExpression" ):
                listener.enterYulExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulExpression" ):
                listener.exitYulExpression(self)




    def yulExpression(self):

        localctx = SolidityParser.YulExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_yulExpression)
        try:
            self.state = 1230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.yulPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1228
                self.yulFunctionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1229
                self.yulLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.typeName_sempred
        self._predicates[45] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 18)
         




